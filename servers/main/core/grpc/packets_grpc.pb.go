// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: packets.proto

package sigma_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	UpdatePass(ctx context.Context, in *AdminUpdatePassDto, opts ...grpc.CallOption) (*AdminUpdatePassOutput, error)
	Signin(ctx context.Context, in *AdminSigninDto, opts ...grpc.CallOption) (*AdminSigninOutput, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) UpdatePass(ctx context.Context, in *AdminUpdatePassDto, opts ...grpc.CallOption) (*AdminUpdatePassOutput, error) {
	out := new(AdminUpdatePassOutput)
	err := c.cc.Invoke(ctx, "/sigma.AdminService/updatePass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Signin(ctx context.Context, in *AdminSigninDto, opts ...grpc.CallOption) (*AdminSigninOutput, error) {
	out := new(AdminSigninOutput)
	err := c.cc.Invoke(ctx, "/sigma.AdminService/signin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	UpdatePass(context.Context, *AdminUpdatePassDto) (*AdminUpdatePassOutput, error)
	Signin(context.Context, *AdminSigninDto) (*AdminSigninOutput, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) UpdatePass(context.Context, *AdminUpdatePassDto) (*AdminUpdatePassOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePass not implemented")
}
func (UnimplementedAdminServiceServer) Signin(context.Context, *AdminSigninDto) (*AdminSigninOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signin not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_UpdatePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdatePassDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.AdminService/updatePass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePass(ctx, req.(*AdminUpdatePassDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Signin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSigninDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Signin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.AdminService/signin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Signin(ctx, req.(*AdminSigninDto))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sigma.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updatePass",
			Handler:    _AdminService_UpdatePass_Handler,
		},
		{
			MethodName: "signin",
			Handler:    _AdminService_Signin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packets.proto",
}

// HumanServiceClient is the client API for HumanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HumanServiceClient interface {
	Authenticate(ctx context.Context, in *HumanAuthenticateDto, opts ...grpc.CallOption) (*HumanAuthenticateOutput, error)
	Signup(ctx context.Context, in *HumanSignupDto, opts ...grpc.CallOption) (*HumanSignupOutput, error)
	Verify(ctx context.Context, in *HumanVerifyDto, opts ...grpc.CallOption) (*HumanVerifyOutput, error)
	Complete(ctx context.Context, in *HumanCompleteDto, opts ...grpc.CallOption) (*HumanCompleteOutput, error)
	Update(ctx context.Context, in *HumanUpdateDto, opts ...grpc.CallOption) (*HumanUpdateOutput, error)
	Get(ctx context.Context, in *HumanGetDto, opts ...grpc.CallOption) (*HumanGetOutput, error)
}

type humanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHumanServiceClient(cc grpc.ClientConnInterface) HumanServiceClient {
	return &humanServiceClient{cc}
}

func (c *humanServiceClient) Authenticate(ctx context.Context, in *HumanAuthenticateDto, opts ...grpc.CallOption) (*HumanAuthenticateOutput, error) {
	out := new(HumanAuthenticateOutput)
	err := c.cc.Invoke(ctx, "/sigma.HumanService/authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *humanServiceClient) Signup(ctx context.Context, in *HumanSignupDto, opts ...grpc.CallOption) (*HumanSignupOutput, error) {
	out := new(HumanSignupOutput)
	err := c.cc.Invoke(ctx, "/sigma.HumanService/signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *humanServiceClient) Verify(ctx context.Context, in *HumanVerifyDto, opts ...grpc.CallOption) (*HumanVerifyOutput, error) {
	out := new(HumanVerifyOutput)
	err := c.cc.Invoke(ctx, "/sigma.HumanService/verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *humanServiceClient) Complete(ctx context.Context, in *HumanCompleteDto, opts ...grpc.CallOption) (*HumanCompleteOutput, error) {
	out := new(HumanCompleteOutput)
	err := c.cc.Invoke(ctx, "/sigma.HumanService/complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *humanServiceClient) Update(ctx context.Context, in *HumanUpdateDto, opts ...grpc.CallOption) (*HumanUpdateOutput, error) {
	out := new(HumanUpdateOutput)
	err := c.cc.Invoke(ctx, "/sigma.HumanService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *humanServiceClient) Get(ctx context.Context, in *HumanGetDto, opts ...grpc.CallOption) (*HumanGetOutput, error) {
	out := new(HumanGetOutput)
	err := c.cc.Invoke(ctx, "/sigma.HumanService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HumanServiceServer is the server API for HumanService service.
// All implementations must embed UnimplementedHumanServiceServer
// for forward compatibility
type HumanServiceServer interface {
	Authenticate(context.Context, *HumanAuthenticateDto) (*HumanAuthenticateOutput, error)
	Signup(context.Context, *HumanSignupDto) (*HumanSignupOutput, error)
	Verify(context.Context, *HumanVerifyDto) (*HumanVerifyOutput, error)
	Complete(context.Context, *HumanCompleteDto) (*HumanCompleteOutput, error)
	Update(context.Context, *HumanUpdateDto) (*HumanUpdateOutput, error)
	Get(context.Context, *HumanGetDto) (*HumanGetOutput, error)
	mustEmbedUnimplementedHumanServiceServer()
}

// UnimplementedHumanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHumanServiceServer struct {
}

func (UnimplementedHumanServiceServer) Authenticate(context.Context, *HumanAuthenticateDto) (*HumanAuthenticateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedHumanServiceServer) Signup(context.Context, *HumanSignupDto) (*HumanSignupOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedHumanServiceServer) Verify(context.Context, *HumanVerifyDto) (*HumanVerifyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedHumanServiceServer) Complete(context.Context, *HumanCompleteDto) (*HumanCompleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedHumanServiceServer) Update(context.Context, *HumanUpdateDto) (*HumanUpdateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedHumanServiceServer) Get(context.Context, *HumanGetDto) (*HumanGetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHumanServiceServer) mustEmbedUnimplementedHumanServiceServer() {}

// UnsafeHumanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HumanServiceServer will
// result in compilation errors.
type UnsafeHumanServiceServer interface {
	mustEmbedUnimplementedHumanServiceServer()
}

func RegisterHumanServiceServer(s grpc.ServiceRegistrar, srv HumanServiceServer) {
	s.RegisterService(&HumanService_ServiceDesc, srv)
}

func _HumanService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanAuthenticateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumanServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.HumanService/authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumanServiceServer).Authenticate(ctx, req.(*HumanAuthenticateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _HumanService_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanSignupDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumanServiceServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.HumanService/signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumanServiceServer).Signup(ctx, req.(*HumanSignupDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _HumanService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanVerifyDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumanServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.HumanService/verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumanServiceServer).Verify(ctx, req.(*HumanVerifyDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _HumanService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanCompleteDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumanServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.HumanService/complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumanServiceServer).Complete(ctx, req.(*HumanCompleteDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _HumanService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanUpdateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumanServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.HumanService/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumanServiceServer).Update(ctx, req.(*HumanUpdateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _HumanService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanGetDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumanServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.HumanService/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumanServiceServer).Get(ctx, req.(*HumanGetDto))
	}
	return interceptor(ctx, in, info, handler)
}

// HumanService_ServiceDesc is the grpc.ServiceDesc for HumanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HumanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sigma.HumanService",
	HandlerType: (*HumanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "authenticate",
			Handler:    _HumanService_Authenticate_Handler,
		},
		{
			MethodName: "signup",
			Handler:    _HumanService_Signup_Handler,
		},
		{
			MethodName: "verify",
			Handler:    _HumanService_Verify_Handler,
		},
		{
			MethodName: "complete",
			Handler:    _HumanService_Complete_Handler,
		},
		{
			MethodName: "update",
			Handler:    _HumanService_Update_Handler,
		},
		{
			MethodName: "get",
			Handler:    _HumanService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packets.proto",
}

// TowerServiceClient is the client API for TowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TowerServiceClient interface {
	Create(ctx context.Context, in *TowerCreateDto, opts ...grpc.CallOption) (*TowerCreateOutput, error)
	Update(ctx context.Context, in *TowerUpdateDto, opts ...grpc.CallOption) (*TowerUpdateOutput, error)
	Delete(ctx context.Context, in *TowerDeleteDto, opts ...grpc.CallOption) (*TowerDeleteOutput, error)
	Get(ctx context.Context, in *TowerGetDto, opts ...grpc.CallOption) (*TowerGetOutput, error)
	Join(ctx context.Context, in *TowerJoinDto, opts ...grpc.CallOption) (*TowerJoinOutput, error)
}

type towerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTowerServiceClient(cc grpc.ClientConnInterface) TowerServiceClient {
	return &towerServiceClient{cc}
}

func (c *towerServiceClient) Create(ctx context.Context, in *TowerCreateDto, opts ...grpc.CallOption) (*TowerCreateOutput, error) {
	out := new(TowerCreateOutput)
	err := c.cc.Invoke(ctx, "/sigma.TowerService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *towerServiceClient) Update(ctx context.Context, in *TowerUpdateDto, opts ...grpc.CallOption) (*TowerUpdateOutput, error) {
	out := new(TowerUpdateOutput)
	err := c.cc.Invoke(ctx, "/sigma.TowerService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *towerServiceClient) Delete(ctx context.Context, in *TowerDeleteDto, opts ...grpc.CallOption) (*TowerDeleteOutput, error) {
	out := new(TowerDeleteOutput)
	err := c.cc.Invoke(ctx, "/sigma.TowerService/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *towerServiceClient) Get(ctx context.Context, in *TowerGetDto, opts ...grpc.CallOption) (*TowerGetOutput, error) {
	out := new(TowerGetOutput)
	err := c.cc.Invoke(ctx, "/sigma.TowerService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *towerServiceClient) Join(ctx context.Context, in *TowerJoinDto, opts ...grpc.CallOption) (*TowerJoinOutput, error) {
	out := new(TowerJoinOutput)
	err := c.cc.Invoke(ctx, "/sigma.TowerService/join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TowerServiceServer is the server API for TowerService service.
// All implementations must embed UnimplementedTowerServiceServer
// for forward compatibility
type TowerServiceServer interface {
	Create(context.Context, *TowerCreateDto) (*TowerCreateOutput, error)
	Update(context.Context, *TowerUpdateDto) (*TowerUpdateOutput, error)
	Delete(context.Context, *TowerDeleteDto) (*TowerDeleteOutput, error)
	Get(context.Context, *TowerGetDto) (*TowerGetOutput, error)
	Join(context.Context, *TowerJoinDto) (*TowerJoinOutput, error)
	mustEmbedUnimplementedTowerServiceServer()
}

// UnimplementedTowerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTowerServiceServer struct {
}

func (UnimplementedTowerServiceServer) Create(context.Context, *TowerCreateDto) (*TowerCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTowerServiceServer) Update(context.Context, *TowerUpdateDto) (*TowerUpdateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTowerServiceServer) Delete(context.Context, *TowerDeleteDto) (*TowerDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTowerServiceServer) Get(context.Context, *TowerGetDto) (*TowerGetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTowerServiceServer) Join(context.Context, *TowerJoinDto) (*TowerJoinOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedTowerServiceServer) mustEmbedUnimplementedTowerServiceServer() {}

// UnsafeTowerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TowerServiceServer will
// result in compilation errors.
type UnsafeTowerServiceServer interface {
	mustEmbedUnimplementedTowerServiceServer()
}

func RegisterTowerServiceServer(s grpc.ServiceRegistrar, srv TowerServiceServer) {
	s.RegisterService(&TowerService_ServiceDesc, srv)
}

func _TowerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TowerCreateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TowerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.TowerService/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TowerServiceServer).Create(ctx, req.(*TowerCreateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _TowerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TowerUpdateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TowerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.TowerService/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TowerServiceServer).Update(ctx, req.(*TowerUpdateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _TowerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TowerDeleteDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TowerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.TowerService/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TowerServiceServer).Delete(ctx, req.(*TowerDeleteDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _TowerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TowerGetDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TowerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.TowerService/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TowerServiceServer).Get(ctx, req.(*TowerGetDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _TowerService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TowerJoinDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TowerServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.TowerService/join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TowerServiceServer).Join(ctx, req.(*TowerJoinDto))
	}
	return interceptor(ctx, in, info, handler)
}

// TowerService_ServiceDesc is the grpc.ServiceDesc for TowerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TowerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sigma.TowerService",
	HandlerType: (*TowerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _TowerService_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _TowerService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _TowerService_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _TowerService_Get_Handler,
		},
		{
			MethodName: "join",
			Handler:    _TowerService_Join_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packets.proto",
}

// RoomServiceClient is the client API for RoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomServiceClient interface {
	Create(ctx context.Context, in *RoomCreateDto, opts ...grpc.CallOption) (*RoomCreateOutput, error)
	Update(ctx context.Context, in *RoomUpdateDto, opts ...grpc.CallOption) (*RoomUpdateOutput, error)
	Delete(ctx context.Context, in *RoomDeleteDto, opts ...grpc.CallOption) (*RoomDeleteOutput, error)
	Get(ctx context.Context, in *RoomGetDto, opts ...grpc.CallOption) (*RoomGetOutput, error)
}

type roomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomServiceClient(cc grpc.ClientConnInterface) RoomServiceClient {
	return &roomServiceClient{cc}
}

func (c *roomServiceClient) Create(ctx context.Context, in *RoomCreateDto, opts ...grpc.CallOption) (*RoomCreateOutput, error) {
	out := new(RoomCreateOutput)
	err := c.cc.Invoke(ctx, "/sigma.RoomService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) Update(ctx context.Context, in *RoomUpdateDto, opts ...grpc.CallOption) (*RoomUpdateOutput, error) {
	out := new(RoomUpdateOutput)
	err := c.cc.Invoke(ctx, "/sigma.RoomService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) Delete(ctx context.Context, in *RoomDeleteDto, opts ...grpc.CallOption) (*RoomDeleteOutput, error) {
	out := new(RoomDeleteOutput)
	err := c.cc.Invoke(ctx, "/sigma.RoomService/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) Get(ctx context.Context, in *RoomGetDto, opts ...grpc.CallOption) (*RoomGetOutput, error) {
	out := new(RoomGetOutput)
	err := c.cc.Invoke(ctx, "/sigma.RoomService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomServiceServer is the server API for RoomService service.
// All implementations must embed UnimplementedRoomServiceServer
// for forward compatibility
type RoomServiceServer interface {
	Create(context.Context, *RoomCreateDto) (*RoomCreateOutput, error)
	Update(context.Context, *RoomUpdateDto) (*RoomUpdateOutput, error)
	Delete(context.Context, *RoomDeleteDto) (*RoomDeleteOutput, error)
	Get(context.Context, *RoomGetDto) (*RoomGetOutput, error)
	mustEmbedUnimplementedRoomServiceServer()
}

// UnimplementedRoomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoomServiceServer struct {
}

func (UnimplementedRoomServiceServer) Create(context.Context, *RoomCreateDto) (*RoomCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRoomServiceServer) Update(context.Context, *RoomUpdateDto) (*RoomUpdateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRoomServiceServer) Delete(context.Context, *RoomDeleteDto) (*RoomDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRoomServiceServer) Get(context.Context, *RoomGetDto) (*RoomGetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRoomServiceServer) mustEmbedUnimplementedRoomServiceServer() {}

// UnsafeRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomServiceServer will
// result in compilation errors.
type UnsafeRoomServiceServer interface {
	mustEmbedUnimplementedRoomServiceServer()
}

func RegisterRoomServiceServer(s grpc.ServiceRegistrar, srv RoomServiceServer) {
	s.RegisterService(&RoomService_ServiceDesc, srv)
}

func _RoomService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCreateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.RoomService/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).Create(ctx, req.(*RoomCreateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomUpdateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.RoomService/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).Update(ctx, req.(*RoomUpdateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomDeleteDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.RoomService/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).Delete(ctx, req.(*RoomDeleteDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomGetDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.RoomService/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).Get(ctx, req.(*RoomGetDto))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomService_ServiceDesc is the grpc.ServiceDesc for RoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sigma.RoomService",
	HandlerType: (*RoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _RoomService_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _RoomService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _RoomService_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _RoomService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packets.proto",
}

// InviteServiceClient is the client API for InviteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InviteServiceClient interface {
	Create(ctx context.Context, in *InviteCreateDto, opts ...grpc.CallOption) (*InviteCreateOutput, error)
	Update(ctx context.Context, in *InviteCancelDto, opts ...grpc.CallOption) (*InviteCancelOutput, error)
	Delete(ctx context.Context, in *InviteAcceptDto, opts ...grpc.CallOption) (*InviteAcceptOutput, error)
	Get(ctx context.Context, in *InviteDeclineDto, opts ...grpc.CallOption) (*InviteDeclineOutput, error)
}

type inviteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInviteServiceClient(cc grpc.ClientConnInterface) InviteServiceClient {
	return &inviteServiceClient{cc}
}

func (c *inviteServiceClient) Create(ctx context.Context, in *InviteCreateDto, opts ...grpc.CallOption) (*InviteCreateOutput, error) {
	out := new(InviteCreateOutput)
	err := c.cc.Invoke(ctx, "/sigma.InviteService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteServiceClient) Update(ctx context.Context, in *InviteCancelDto, opts ...grpc.CallOption) (*InviteCancelOutput, error) {
	out := new(InviteCancelOutput)
	err := c.cc.Invoke(ctx, "/sigma.InviteService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteServiceClient) Delete(ctx context.Context, in *InviteAcceptDto, opts ...grpc.CallOption) (*InviteAcceptOutput, error) {
	out := new(InviteAcceptOutput)
	err := c.cc.Invoke(ctx, "/sigma.InviteService/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteServiceClient) Get(ctx context.Context, in *InviteDeclineDto, opts ...grpc.CallOption) (*InviteDeclineOutput, error) {
	out := new(InviteDeclineOutput)
	err := c.cc.Invoke(ctx, "/sigma.InviteService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InviteServiceServer is the server API for InviteService service.
// All implementations must embed UnimplementedInviteServiceServer
// for forward compatibility
type InviteServiceServer interface {
	Create(context.Context, *InviteCreateDto) (*InviteCreateOutput, error)
	Update(context.Context, *InviteCancelDto) (*InviteCancelOutput, error)
	Delete(context.Context, *InviteAcceptDto) (*InviteAcceptOutput, error)
	Get(context.Context, *InviteDeclineDto) (*InviteDeclineOutput, error)
	mustEmbedUnimplementedInviteServiceServer()
}

// UnimplementedInviteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInviteServiceServer struct {
}

func (UnimplementedInviteServiceServer) Create(context.Context, *InviteCreateDto) (*InviteCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedInviteServiceServer) Update(context.Context, *InviteCancelDto) (*InviteCancelOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedInviteServiceServer) Delete(context.Context, *InviteAcceptDto) (*InviteAcceptOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedInviteServiceServer) Get(context.Context, *InviteDeclineDto) (*InviteDeclineOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedInviteServiceServer) mustEmbedUnimplementedInviteServiceServer() {}

// UnsafeInviteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InviteServiceServer will
// result in compilation errors.
type UnsafeInviteServiceServer interface {
	mustEmbedUnimplementedInviteServiceServer()
}

func RegisterInviteServiceServer(s grpc.ServiceRegistrar, srv InviteServiceServer) {
	s.RegisterService(&InviteService_ServiceDesc, srv)
}

func _InviteService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteCreateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.InviteService/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServiceServer).Create(ctx, req.(*InviteCreateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteCancelDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.InviteService/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServiceServer).Update(ctx, req.(*InviteCancelDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteAcceptDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.InviteService/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServiceServer).Delete(ctx, req.(*InviteAcceptDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteDeclineDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.InviteService/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServiceServer).Get(ctx, req.(*InviteDeclineDto))
	}
	return interceptor(ctx, in, info, handler)
}

// InviteService_ServiceDesc is the grpc.ServiceDesc for InviteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InviteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sigma.InviteService",
	HandlerType: (*InviteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _InviteService_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _InviteService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _InviteService_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _InviteService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packets.proto",
}

// MachineServiceClient is the client API for MachineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachineServiceClient interface {
	Create(ctx context.Context, in *MachineCreateDto, opts ...grpc.CallOption) (*MachineCreateOutput, error)
	Update(ctx context.Context, in *MachineUpdateDto, opts ...grpc.CallOption) (*MachineUpdateOutput, error)
	Delete(ctx context.Context, in *MachineDeleteDto, opts ...grpc.CallOption) (*MachineDeleteOutput, error)
	Get(ctx context.Context, in *MachineGetDto, opts ...grpc.CallOption) (*MachineGetOutput, error)
}

type machineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineServiceClient(cc grpc.ClientConnInterface) MachineServiceClient {
	return &machineServiceClient{cc}
}

func (c *machineServiceClient) Create(ctx context.Context, in *MachineCreateDto, opts ...grpc.CallOption) (*MachineCreateOutput, error) {
	out := new(MachineCreateOutput)
	err := c.cc.Invoke(ctx, "/sigma.MachineService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) Update(ctx context.Context, in *MachineUpdateDto, opts ...grpc.CallOption) (*MachineUpdateOutput, error) {
	out := new(MachineUpdateOutput)
	err := c.cc.Invoke(ctx, "/sigma.MachineService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) Delete(ctx context.Context, in *MachineDeleteDto, opts ...grpc.CallOption) (*MachineDeleteOutput, error) {
	out := new(MachineDeleteOutput)
	err := c.cc.Invoke(ctx, "/sigma.MachineService/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) Get(ctx context.Context, in *MachineGetDto, opts ...grpc.CallOption) (*MachineGetOutput, error) {
	out := new(MachineGetOutput)
	err := c.cc.Invoke(ctx, "/sigma.MachineService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineServiceServer is the server API for MachineService service.
// All implementations must embed UnimplementedMachineServiceServer
// for forward compatibility
type MachineServiceServer interface {
	Create(context.Context, *MachineCreateDto) (*MachineCreateOutput, error)
	Update(context.Context, *MachineUpdateDto) (*MachineUpdateOutput, error)
	Delete(context.Context, *MachineDeleteDto) (*MachineDeleteOutput, error)
	Get(context.Context, *MachineGetDto) (*MachineGetOutput, error)
	mustEmbedUnimplementedMachineServiceServer()
}

// UnimplementedMachineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMachineServiceServer struct {
}

func (UnimplementedMachineServiceServer) Create(context.Context, *MachineCreateDto) (*MachineCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMachineServiceServer) Update(context.Context, *MachineUpdateDto) (*MachineUpdateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMachineServiceServer) Delete(context.Context, *MachineDeleteDto) (*MachineDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMachineServiceServer) Get(context.Context, *MachineGetDto) (*MachineGetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMachineServiceServer) mustEmbedUnimplementedMachineServiceServer() {}

// UnsafeMachineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachineServiceServer will
// result in compilation errors.
type UnsafeMachineServiceServer interface {
	mustEmbedUnimplementedMachineServiceServer()
}

func RegisterMachineServiceServer(s grpc.ServiceRegistrar, srv MachineServiceServer) {
	s.RegisterService(&MachineService_ServiceDesc, srv)
}

func _MachineService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineCreateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.MachineService/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).Create(ctx, req.(*MachineCreateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineUpdateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.MachineService/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).Update(ctx, req.(*MachineUpdateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineDeleteDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.MachineService/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).Delete(ctx, req.(*MachineDeleteDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineGetDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.MachineService/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).Get(ctx, req.(*MachineGetDto))
	}
	return interceptor(ctx, in, info, handler)
}

// MachineService_ServiceDesc is the grpc.ServiceDesc for MachineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MachineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sigma.MachineService",
	HandlerType: (*MachineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _MachineService_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _MachineService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _MachineService_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _MachineService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packets.proto",
}

// WorkerServiceClient is the client API for WorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerServiceClient interface {
	Create(ctx context.Context, in *WorkerCreateDto, opts ...grpc.CallOption) (*WorkerCreateOutput, error)
	Update(ctx context.Context, in *WorkerUpdateDto, opts ...grpc.CallOption) (*WorkerUpdateOutput, error)
	Delete(ctx context.Context, in *WorkerDeleteDto, opts ...grpc.CallOption) (*WorkerDeleteOutput, error)
	Read(ctx context.Context, in *WorkerReadDto, opts ...grpc.CallOption) (*WorkerReadOutput, error)
	Deliver(ctx context.Context, in *WorkerDeliverDto, opts ...grpc.CallOption) (*WorkerDeliverOutput, error)
}

type workerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerServiceClient(cc grpc.ClientConnInterface) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) Create(ctx context.Context, in *WorkerCreateDto, opts ...grpc.CallOption) (*WorkerCreateOutput, error) {
	out := new(WorkerCreateOutput)
	err := c.cc.Invoke(ctx, "/sigma.WorkerService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) Update(ctx context.Context, in *WorkerUpdateDto, opts ...grpc.CallOption) (*WorkerUpdateOutput, error) {
	out := new(WorkerUpdateOutput)
	err := c.cc.Invoke(ctx, "/sigma.WorkerService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) Delete(ctx context.Context, in *WorkerDeleteDto, opts ...grpc.CallOption) (*WorkerDeleteOutput, error) {
	out := new(WorkerDeleteOutput)
	err := c.cc.Invoke(ctx, "/sigma.WorkerService/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) Read(ctx context.Context, in *WorkerReadDto, opts ...grpc.CallOption) (*WorkerReadOutput, error) {
	out := new(WorkerReadOutput)
	err := c.cc.Invoke(ctx, "/sigma.WorkerService/read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) Deliver(ctx context.Context, in *WorkerDeliverDto, opts ...grpc.CallOption) (*WorkerDeliverOutput, error) {
	out := new(WorkerDeliverOutput)
	err := c.cc.Invoke(ctx, "/sigma.WorkerService/deliver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServiceServer is the server API for WorkerService service.
// All implementations must embed UnimplementedWorkerServiceServer
// for forward compatibility
type WorkerServiceServer interface {
	Create(context.Context, *WorkerCreateDto) (*WorkerCreateOutput, error)
	Update(context.Context, *WorkerUpdateDto) (*WorkerUpdateOutput, error)
	Delete(context.Context, *WorkerDeleteDto) (*WorkerDeleteOutput, error)
	Read(context.Context, *WorkerReadDto) (*WorkerReadOutput, error)
	Deliver(context.Context, *WorkerDeliverDto) (*WorkerDeliverOutput, error)
	mustEmbedUnimplementedWorkerServiceServer()
}

// UnimplementedWorkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServiceServer struct {
}

func (UnimplementedWorkerServiceServer) Create(context.Context, *WorkerCreateDto) (*WorkerCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWorkerServiceServer) Update(context.Context, *WorkerUpdateDto) (*WorkerUpdateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWorkerServiceServer) Delete(context.Context, *WorkerDeleteDto) (*WorkerDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWorkerServiceServer) Read(context.Context, *WorkerReadDto) (*WorkerReadOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedWorkerServiceServer) Deliver(context.Context, *WorkerDeliverDto) (*WorkerDeliverOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deliver not implemented")
}
func (UnimplementedWorkerServiceServer) mustEmbedUnimplementedWorkerServiceServer() {}

// UnsafeWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServiceServer will
// result in compilation errors.
type UnsafeWorkerServiceServer interface {
	mustEmbedUnimplementedWorkerServiceServer()
}

func RegisterWorkerServiceServer(s grpc.ServiceRegistrar, srv WorkerServiceServer) {
	s.RegisterService(&WorkerService_ServiceDesc, srv)
}

func _WorkerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerCreateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.WorkerService/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).Create(ctx, req.(*WorkerCreateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerUpdateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.WorkerService/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).Update(ctx, req.(*WorkerUpdateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerDeleteDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.WorkerService/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).Delete(ctx, req.(*WorkerDeleteDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerReadDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.WorkerService/read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).Read(ctx, req.(*WorkerReadDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_Deliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerDeliverDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).Deliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.WorkerService/deliver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).Deliver(ctx, req.(*WorkerDeliverDto))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerService_ServiceDesc is the grpc.ServiceDesc for WorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sigma.WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _WorkerService_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _WorkerService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _WorkerService_Delete_Handler,
		},
		{
			MethodName: "read",
			Handler:    _WorkerService_Read_Handler,
		},
		{
			MethodName: "deliver",
			Handler:    _WorkerService_Deliver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packets.proto",
}
