// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: packets.proto

package sigma_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HumanServiceClient is the client API for HumanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HumanServiceClient interface {
	Signup(ctx context.Context, in *HumanSignupDto, opts ...grpc.CallOption) (*HumanSignupOutput, error)
	Verify(ctx context.Context, in *HumanVerifyDto, opts ...grpc.CallOption) (*HumanVerifyOutput, error)
	Complete(ctx context.Context, in *HumanCompleteDto, opts ...grpc.CallOption) (*HumanCompleteOutput, error)
	Update(ctx context.Context, in *HumanUpdateDto, opts ...grpc.CallOption) (*HumanUpdateOutput, error)
	Get(ctx context.Context, in *HumanGetDto, opts ...grpc.CallOption) (*HumanGetOutput, error)
}

type humanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHumanServiceClient(cc grpc.ClientConnInterface) HumanServiceClient {
	return &humanServiceClient{cc}
}

func (c *humanServiceClient) Signup(ctx context.Context, in *HumanSignupDto, opts ...grpc.CallOption) (*HumanSignupOutput, error) {
	out := new(HumanSignupOutput)
	err := c.cc.Invoke(ctx, "/sigma.HumanService/signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *humanServiceClient) Verify(ctx context.Context, in *HumanVerifyDto, opts ...grpc.CallOption) (*HumanVerifyOutput, error) {
	out := new(HumanVerifyOutput)
	err := c.cc.Invoke(ctx, "/sigma.HumanService/verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *humanServiceClient) Complete(ctx context.Context, in *HumanCompleteDto, opts ...grpc.CallOption) (*HumanCompleteOutput, error) {
	out := new(HumanCompleteOutput)
	err := c.cc.Invoke(ctx, "/sigma.HumanService/complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *humanServiceClient) Update(ctx context.Context, in *HumanUpdateDto, opts ...grpc.CallOption) (*HumanUpdateOutput, error) {
	out := new(HumanUpdateOutput)
	err := c.cc.Invoke(ctx, "/sigma.HumanService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *humanServiceClient) Get(ctx context.Context, in *HumanGetDto, opts ...grpc.CallOption) (*HumanGetOutput, error) {
	out := new(HumanGetOutput)
	err := c.cc.Invoke(ctx, "/sigma.HumanService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HumanServiceServer is the server API for HumanService service.
// All implementations must embed UnimplementedHumanServiceServer
// for forward compatibility
type HumanServiceServer interface {
	Signup(context.Context, *HumanSignupDto) (*HumanSignupOutput, error)
	Verify(context.Context, *HumanVerifyDto) (*HumanVerifyOutput, error)
	Complete(context.Context, *HumanCompleteDto) (*HumanCompleteOutput, error)
	Update(context.Context, *HumanUpdateDto) (*HumanUpdateOutput, error)
	Get(context.Context, *HumanGetDto) (*HumanGetOutput, error)
	mustEmbedUnimplementedHumanServiceServer()
}

// UnimplementedHumanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHumanServiceServer struct {
}

func (UnimplementedHumanServiceServer) Signup(context.Context, *HumanSignupDto) (*HumanSignupOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedHumanServiceServer) Verify(context.Context, *HumanVerifyDto) (*HumanVerifyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedHumanServiceServer) Complete(context.Context, *HumanCompleteDto) (*HumanCompleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedHumanServiceServer) Update(context.Context, *HumanUpdateDto) (*HumanUpdateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedHumanServiceServer) Get(context.Context, *HumanGetDto) (*HumanGetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHumanServiceServer) mustEmbedUnimplementedHumanServiceServer() {}

// UnsafeHumanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HumanServiceServer will
// result in compilation errors.
type UnsafeHumanServiceServer interface {
	mustEmbedUnimplementedHumanServiceServer()
}

func RegisterHumanServiceServer(s grpc.ServiceRegistrar, srv HumanServiceServer) {
	s.RegisterService(&HumanService_ServiceDesc, srv)
}

func _HumanService_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanSignupDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumanServiceServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.HumanService/signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumanServiceServer).Signup(ctx, req.(*HumanSignupDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _HumanService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanVerifyDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumanServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.HumanService/verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumanServiceServer).Verify(ctx, req.(*HumanVerifyDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _HumanService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanCompleteDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumanServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.HumanService/complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumanServiceServer).Complete(ctx, req.(*HumanCompleteDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _HumanService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanUpdateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumanServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.HumanService/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumanServiceServer).Update(ctx, req.(*HumanUpdateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _HumanService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanGetDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumanServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.HumanService/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumanServiceServer).Get(ctx, req.(*HumanGetDto))
	}
	return interceptor(ctx, in, info, handler)
}

// HumanService_ServiceDesc is the grpc.ServiceDesc for HumanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HumanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sigma.HumanService",
	HandlerType: (*HumanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "signup",
			Handler:    _HumanService_Signup_Handler,
		},
		{
			MethodName: "verify",
			Handler:    _HumanService_Verify_Handler,
		},
		{
			MethodName: "complete",
			Handler:    _HumanService_Complete_Handler,
		},
		{
			MethodName: "update",
			Handler:    _HumanService_Update_Handler,
		},
		{
			MethodName: "get",
			Handler:    _HumanService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packets.proto",
}

// TowerServiceClient is the client API for TowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TowerServiceClient interface {
	Create(ctx context.Context, in *TowerCreateDto, opts ...grpc.CallOption) (*TowerCreateOutput, error)
	Update(ctx context.Context, in *TowerUpdateDto, opts ...grpc.CallOption) (*TowerUpdateOutput, error)
	Delete(ctx context.Context, in *TowerDeleteDto, opts ...grpc.CallOption) (*TowerDeleteOutput, error)
	Get(ctx context.Context, in *TowerGetDto, opts ...grpc.CallOption) (*TowerGetOutput, error)
	Join(ctx context.Context, in *TowerJoinDto, opts ...grpc.CallOption) (*TowerJoinOutput, error)
}

type towerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTowerServiceClient(cc grpc.ClientConnInterface) TowerServiceClient {
	return &towerServiceClient{cc}
}

func (c *towerServiceClient) Create(ctx context.Context, in *TowerCreateDto, opts ...grpc.CallOption) (*TowerCreateOutput, error) {
	out := new(TowerCreateOutput)
	err := c.cc.Invoke(ctx, "/sigma.TowerService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *towerServiceClient) Update(ctx context.Context, in *TowerUpdateDto, opts ...grpc.CallOption) (*TowerUpdateOutput, error) {
	out := new(TowerUpdateOutput)
	err := c.cc.Invoke(ctx, "/sigma.TowerService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *towerServiceClient) Delete(ctx context.Context, in *TowerDeleteDto, opts ...grpc.CallOption) (*TowerDeleteOutput, error) {
	out := new(TowerDeleteOutput)
	err := c.cc.Invoke(ctx, "/sigma.TowerService/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *towerServiceClient) Get(ctx context.Context, in *TowerGetDto, opts ...grpc.CallOption) (*TowerGetOutput, error) {
	out := new(TowerGetOutput)
	err := c.cc.Invoke(ctx, "/sigma.TowerService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *towerServiceClient) Join(ctx context.Context, in *TowerJoinDto, opts ...grpc.CallOption) (*TowerJoinOutput, error) {
	out := new(TowerJoinOutput)
	err := c.cc.Invoke(ctx, "/sigma.TowerService/join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TowerServiceServer is the server API for TowerService service.
// All implementations must embed UnimplementedTowerServiceServer
// for forward compatibility
type TowerServiceServer interface {
	Create(context.Context, *TowerCreateDto) (*TowerCreateOutput, error)
	Update(context.Context, *TowerUpdateDto) (*TowerUpdateOutput, error)
	Delete(context.Context, *TowerDeleteDto) (*TowerDeleteOutput, error)
	Get(context.Context, *TowerGetDto) (*TowerGetOutput, error)
	Join(context.Context, *TowerJoinDto) (*TowerJoinOutput, error)
	mustEmbedUnimplementedTowerServiceServer()
}

// UnimplementedTowerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTowerServiceServer struct {
}

func (UnimplementedTowerServiceServer) Create(context.Context, *TowerCreateDto) (*TowerCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTowerServiceServer) Update(context.Context, *TowerUpdateDto) (*TowerUpdateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTowerServiceServer) Delete(context.Context, *TowerDeleteDto) (*TowerDeleteOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTowerServiceServer) Get(context.Context, *TowerGetDto) (*TowerGetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTowerServiceServer) Join(context.Context, *TowerJoinDto) (*TowerJoinOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedTowerServiceServer) mustEmbedUnimplementedTowerServiceServer() {}

// UnsafeTowerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TowerServiceServer will
// result in compilation errors.
type UnsafeTowerServiceServer interface {
	mustEmbedUnimplementedTowerServiceServer()
}

func RegisterTowerServiceServer(s grpc.ServiceRegistrar, srv TowerServiceServer) {
	s.RegisterService(&TowerService_ServiceDesc, srv)
}

func _TowerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TowerCreateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TowerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.TowerService/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TowerServiceServer).Create(ctx, req.(*TowerCreateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _TowerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TowerUpdateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TowerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.TowerService/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TowerServiceServer).Update(ctx, req.(*TowerUpdateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _TowerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TowerDeleteDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TowerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.TowerService/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TowerServiceServer).Delete(ctx, req.(*TowerDeleteDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _TowerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TowerGetDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TowerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.TowerService/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TowerServiceServer).Get(ctx, req.(*TowerGetDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _TowerService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TowerJoinDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TowerServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigma.TowerService/join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TowerServiceServer).Join(ctx, req.(*TowerJoinDto))
	}
	return interceptor(ctx, in, info, handler)
}

// TowerService_ServiceDesc is the grpc.ServiceDesc for TowerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TowerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sigma.TowerService",
	HandlerType: (*TowerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _TowerService_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _TowerService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _TowerService_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _TowerService_Get_Handler,
		},
		{
			MethodName: "join",
			Handler:    _TowerService_Join_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packets.proto",
}
