{"version":3,"sources":["../index.ts","../database/factories/human.factory.ts","../database/schema/human.schema.ts","../database/factories/tower.factory.ts","../database/schema/tower.schema.ts","../database/factories/room.factory.ts","../database/schema/room.schema.ts","../database/factories/session.factory.ts","../database/schema/session.schema.ts","../database/factories/member.factory.ts","../database/schema/member.schema.ts","../database/factories/pending.factory.ts","../database/schema/pending.schema.ts","../database/factories/invite.factory.ts","../database/schema/invite.schema.ts","../database/drivers/main-driver.ts","../config.ts","../database/schema/bot.schema.ts","../database/schema/worker.schema.ts","../database/schema/machine.schema.ts","../database/schema/index.ts","../database/factories/machine.factory.ts","../database/factories/worker.factory.ts","../database/index.ts","../drivers/network/network.ts","../utils/json.ts","../drivers/network/client.ts","../drivers/memory/memory.ts","../controllers/base.controller.ts","../controllers/custom.controller.ts","../database/transactions/human/index.ts","../database/transactions/human/signIn.ts","../database/transactions/human/signUp.ts","../utils/strings.ts","../utils/generator.ts","../database/transactions/human/verify.ts","../database/transactions/human/complete.ts","../permissions.json","../database/transactions/human/readById.ts","../database/transactions/human/search.ts","../database/transactions/human/signOut.ts","../database/transactions/human/readGroupById.ts","../database/transactions/human/update.ts","../database/transactions/tower/index.ts","../database/transactions/tower/create.ts","../database/transactions/tower/update.ts","../database/transactions/tower/remove.ts","../database/transactions/tower/search.ts","../database/transactions/tower/join.ts","../utils/numbers.ts","../database/transactions/tower/readById.ts","../database/transactions/tower/readMembers.ts","../database/transactions/tower/read.ts","../database/transactions/tower/addMember.ts","../database/transactions/room/index.ts","../database/transactions/room/create.ts","../database/transactions/room/remove.ts","../database/transactions/room/search.ts","../database/transactions/room/readById.ts","../database/transactions/room/update.ts","../database/transactions/invite/index.ts","../database/transactions/invite/create.ts","../database/transactions/invite/accept.ts","../database/transactions/invite/decline.ts","../database/transactions/invite/cancel.ts","../database/transactions/invite/read.ts","../database/transactions/permission/index.ts","../database/transactions/permission/update.ts","../database/transactions/permission/read.ts","../database/transactions/machine/index.ts","../database/transactions/machine/create.ts","../database/transactions/machine/update.ts","../database/transactions/machine/remove.ts","../database/transactions/machine/search.ts","../database/transactions/machine/read.ts","../database/transactions/machine/signIn.ts","../database/transactions/worker/index.ts","../database/transactions/worker/create.ts","../database/transactions/worker/remove.ts","../database/transactions/worker/read.ts","../database/transactions/worker/update.ts","../utils/filter.ts","../guardian/authenticate.ts","../guardian/authorize.ts","../guardian/rules/addRule.ts","../guardian/rules/isRule.ts","../guardian/rules/removeRule.ts","../guardian/rules/removeRules.ts","../guardian/rules/index.ts","../guardian/index.ts","../extendables.ts","../services/human.service.ts","../controllers/human.controller.ts","../controllers/tower.controller.ts","../updater/tower/index.ts","../updater/base.ts","../updater/tower/onUpdate.ts","../updater/tower/onRemove.ts","../updater/tower/onHumanJoin.ts","../updater/room/index.ts","../updater/room/onUpdate.ts","../updater/room/onRemove.ts","../updater/room/onCreate.ts","../updater/permission/index.ts","../updater/permission/onUpdate.ts","../updater/invite/index.ts","../updater/invite/onAccept.ts","../updater/invite/onCancel.ts","../updater/invite/onCreate.ts","../updater/invite/onDecline.ts","../updater/worker/index.ts","../updater/worker/onRequest.ts","../updater/worker/onResponse.ts","../updater/index.ts","../services/tower.service.ts","../services/room.service.ts","../controllers/room.controller.ts","../controllers/invite.controller.ts","../services/invite.service.ts","../controllers/permission.controller.ts","../services/permission.service.ts","../services/machine.service.ts","../controllers/machine.controller.ts","../services/worker.service.ts","../controllers/worker.controller.ts","../controllers/index.ts","../sigma.ts","../services/base.service.ts","../machines/base.machine.ts","../machines/utils/action.ts"],"sourcesContent":["\nimport Sigma from \"sigma\";\nimport Client from \"drivers/network/client\";\nimport BaseMachine from \"machines/base.machine\";\nimport Action from \"machines/utils/action\";\nimport Updater from './updater'\nimport Update from \"updater/base\";\n\nexport {\n    Sigma,\n    Client,\n    BaseMachine,\n    Action,\n    Updater,\n    Update\n}\n","\nimport mongoose, { ClientSession } from \"mongoose\";\nimport { Human } from \"../schema/human.schema\";\nimport { IHuman } from \"models/human.model\";\n\nclass HumanFactory {\n    static _instnace: HumanFactory;\n    static initialize(): HumanFactory {\n        return new HumanFactory();\n    }\n    static get instance(): HumanFactory {\n        return HumanFactory._instnace;\n    }\n    constructor() {\n        HumanFactory._instnace = this;\n    }\n    async create(initData: IHuman, session: ClientSession): Promise<IHuman> {\n        return (await Human.create([initData], { session }))[0].toObject();\n    }\n    async read(offset?: number, count?: number, query?: any): Promise<Array<IHuman>> {\n        let cursor: mongoose.mongo.FindCursor;\n        let collection = mongoose.connection.db.collection('Human');\n        if (offset && count) {\n            if ((await collection.count()) - offset >= 0) {\n                cursor = collection.find(query ? query : {}).skip(offset).limit(count);\n            } else {\n                cursor = collection.find(query ? query : {}).skip(0).limit(count);\n            }\n        } else {\n            cursor = collection.find(query ? query : {});\n        }\n        return await cursor.toArray();\n    }\n    async find(query: any, session?: ClientSession): Promise<IHuman> {\n        if (session) {\n            return await Human.findOne(query).session(session).lean().exec();\n        } else {\n            return await Human.findOne(query).lean().exec();\n        }\n    }\n    async findGroup(query: any, session?: ClientSession): Promise<Array<IHuman>> {\n        if (session) {\n            return await Human.find(query).session(session).lean().exec();\n        } else {\n            return await Human.find(query).lean().exec();\n        }\n    }\n    async update(query: any, update: any, session?: ClientSession): Promise<IHuman> {\n        if (session) {\n            return await Human.findOneAndUpdate(query, update, { new: true }).session(session).lean().exec();\n        } else {\n            return await Human.findOneAndUpdate(query, update, { new: true }).lean();\n        }\n    }\n    async remove(query: any, session: ClientSession): Promise<void> {\n        await Human.deleteOne(query).session(session);\n    }\n}\n\nexport default HumanFactory\n","\nimport mongoose, { Schema } from \"mongoose\";\nimport { IHuman } from \"models/human.model\";\n\nconst HumanSchema = new Schema<IHuman>({\n    id: String,\n    firstName: String,\n    lastName: String,\n    secret: Schema.Types.Mixed\n})\n\nlet Human: mongoose.Model<IHuman>\n\nlet prepare = () => {\n    Human = mongoose.model<IHuman>('Human', HumanSchema, 'Human')\n}\n\nexport { Human, prepare }\n","\nimport mongoose, { ClientSession } from \"mongoose\";\nimport { Tower } from \"../schema/tower.schema\";\nimport { ITower } from \"models/tower.model\";\n\nclass TowerFactory {\n    static _instance: TowerFactory;\n    static initialize(): TowerFactory {\n        return new TowerFactory();\n    }\n    static get instance(): TowerFactory {\n        return TowerFactory._instance;\n    }\n    constructor() {\n        TowerFactory._instance = this;\n    }\n    async create(initData: ITower, session: ClientSession): Promise<ITower> {\n        return (await Tower.create([initData], { session }))[0].toObject();\n    }\n    async read(offset?: number, count?: number, query?: any): Promise<Array<ITower>> {\n        let cursor: mongoose.mongo.FindCursor;\n        let collection = mongoose.connection.db.collection('Tower');\n        if ((await collection.count()) - offset >= 0) {\n            cursor = collection.find(query ? query : {}).skip(offset).limit(count);\n        } else {\n            cursor = collection.find(query ? query : {}).skip(0).limit(count);\n        }\n        return await cursor.toArray();\n    }\n    async find(query: any, session: ClientSession): Promise<ITower> {\n        return await Tower.findOne(query).session(session).lean().exec();\n    }\n    async findGroup(query: any, session?: ClientSession): Promise<Array<ITower>> {\n        if (session) {\n            return await Tower.find(query).session(session).lean().exec();\n        } else {\n            return await Tower.find(query).lean().exec();\n        }\n    }\n    async update(query: any, update: any, session: ClientSession): Promise<ITower> {\n        return await Tower.findOneAndUpdate(query, update, { new: true }).session(session).lean();\n    }\n    async remove(query: any, session: ClientSession): Promise<void> {\n        await Tower.deleteOne(query).session(session);\n    }\n}\n\nexport default TowerFactory\n","\nimport mongoose, { Schema } from \"mongoose\";\nimport { ITower } from \"models/tower.model\";\n\nconst TowerSchema = new Schema<ITower>({\n    id: String,\n    title: String,\n    avatarId: String,\n    isPublic: Boolean,\n    secret: Schema.Types.Mixed\n})\n\nlet Tower: mongoose.Model<ITower>\n\nlet prepare = () => {\n    Tower = mongoose.model<ITower>('Tower', TowerSchema, 'Tower')\n}\n\nexport { Tower, prepare }\n","\nimport mongoose, { ClientSession } from \"mongoose\";\nimport { IRoom, Room } from \"../schema/room.schema\";\n\nclass RoomFactory {\n    static _instance: RoomFactory;\n    static initialize(): RoomFactory {\n        return new RoomFactory();\n    }\n    static get instance(): RoomFactory {\n        return RoomFactory._instance;\n    }\n    constructor() {\n        RoomFactory._instance = this;\n    }\n    async create(initData: IRoom, session: ClientSession): Promise<IRoom> {\n        return (await Room.create([initData], { session }))[0].toObject();\n    }\n    async read(offset?: number, count?: number, query?: any): Promise<Array<IRoom>> {\n        let cursor: mongoose.mongo.FindCursor\n        let collection = mongoose.connection.db.collection('Room');\n        if ((await collection.count()) - offset >= 0) {\n            cursor = collection.find(query ? query : {}).skip(offset).limit(count);\n        } else {\n            cursor = collection.find(query ? query : {}).skip(0).limit(count);\n        }\n        return await cursor.toArray();\n    }\n    async find(query: any, session: ClientSession): Promise<IRoom> {\n        return await Room.findOne(query).session(session).lean().exec();\n    }\n    async findGroup(query: any, session?: ClientSession) : Promise<Array<IRoom>> {\n        if (session) {\n            return await Room.find(query).session(session).lean().exec();\n        } else {\n            return await Room.find(query).lean().exec();\n        }\n    }\n    async update(query: any, update: any, session: ClientSession): Promise<IRoom> {\n        return await Room.findOneAndUpdate(query, update, { new: true }).session(session).lean();\n    }\n    async remove(query: any, session: ClientSession): Promise<void> {\n        await Room.deleteOne(query).session(session);\n    }\n}\n\nexport default RoomFactory","\nimport mongoose, { Schema } from \"mongoose\";\nimport { IRoom } from \"../../models/room.model\";\n\nconst RoomSchema = new Schema<IRoom>({\n    id: String,\n    title: String,\n    avatarId: String,\n    towerId: String,\n    floor: String,\n    isPublic: Boolean,\n    secret: Schema.Types.Mixed\n})\n\nlet Room: mongoose.Model<IRoom>\n\nlet prepare = () => {\n    Room = mongoose.model<IRoom>('Room', RoomSchema, 'Room')\n}\n\nexport { Room, prepare, IRoom }\n","\nimport mongoose, { ClientSession } from \"mongoose\";\nimport { Session } from \"../schema/session.schema\";\nimport { ISession } from \"models/session.model\";\n\nclass SessionFactory {\n    static _instance;\n    static initialize() : SessionFactory {\n        return new SessionFactory();\n    }\n    static get instance() : SessionFactory {\n        return SessionFactory._instance;\n    }\n    constructor() {\n        SessionFactory._instance = this;\n    }\n    async create(initData: ISession, session: ClientSession) {\n        return (await Session.create([initData], { session }))[0].toObject();\n    }\n    async read(offset?: number, count?: number, query?: any) {\n        let cursor;\n        let collection = mongoose.connection.db.collection('Session');\n        if (offset && count && query) {\n            if ((await collection.count()) - offset >= 0) {\n                if (query) {\n                    cursor = collection.find(query).skip(offset).limit(count);\n                } else {\n                    cursor = collection.find({}).skip(offset).limit(count);\n                }\n            } else {\n                if (query) {\n                    cursor = collection.find(query).skip(0).limit(count);\n                } else {\n                    cursor = collection.find({}).skip(0).limit(count);\n                }\n            }\n        } else {\n            cursor = collection.find({});\n        }\n        return await cursor.toArray();\n    }\n    async find(query: any, session: ClientSession) {\n        return await Session.findOne(query).session(session).lean().exec();\n    }\n    async findGroup(query: any, session: ClientSession) {\n        return await Session.find(query).session(session).lean().exec();\n    }\n    async update(query: any, update: any, session: ClientSession) {\n        await Session.findOneAndUpdate(query, update, { new: true }).session(session).lean();\n    }\n    async remove(query: any, session: ClientSession): Promise<void> {\n        await Session.deleteOne(query).session(session);\n    }\n}\n\nexport default SessionFactory","\nimport mongoose, { Schema } from \"mongoose\";\nimport { ISession } from \"models/session.model\";\n\nconst SessionSchema = new Schema<ISession>({\n    id: String,\n    token: String,\n    humanId: String\n})\n\nlet Session: mongoose.Model<ISession>\n\nlet prepare = () => {\n    Session = mongoose.model<ISession>('Session', SessionSchema, 'Session')\n}\n\nexport { Session, prepare }\n\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport { Member } from '../schema/member.schema'\nimport { IMember } from 'models/member.model';\n\nclass MemberFactory {\n    static _instance: MemberFactory;\n    static initialize(): MemberFactory {\n        return new MemberFactory();\n    }\n    static get instance(): MemberFactory {\n        return MemberFactory._instance;\n    }\n    constructor() {\n        MemberFactory._instance = this;\n    }\n    async create(initData: any, session: ClientSession): Promise<IMember> {\n        return (await Member.create([initData], { session }))[0].toObject();\n    }\n    async read(query?: any, offset?: number, count?: number): Promise<Array<IMember>> {\n        let cursor: any;\n        let collection = mongoose.connection.db.collection('Member');\n        if (offset && count && query) {\n            if ((await collection.count()) - offset >= 0) {\n                cursor = collection.find(query ? query : {}).skip(offset).limit(count);\n            } else {\n                cursor = collection.find(query ? query : {}).skip(0).limit(count);\n            }\n            return await cursor.toArray();\n        } else {\n            cursor = collection.find({});\n        }\n        return await cursor.toArray();\n    }\n    async find(query: any, session: ClientSession): Promise<IMember> {\n        return await Member.findOne(query).session(session).lean().exec();\n    }\n    async findGroup(query: any, session: ClientSession): Promise<Array<IMember>> {\n        if (session) {\n            return await Member.find(query).session(session).lean().exec();\n        } else {\n            return await Member.find(query).lean().exec();\n        }\n    }\n    async update(query: any, update: any, session: ClientSession): Promise<IMember> {\n        return await Member.findOneAndUpdate(query, update, { new: true }).session(session).lean();\n    }\n    async remove(query: any, session: ClientSession): Promise<void> {\n        await Member.deleteOne(query).session(session);\n    }\n}\n\nexport default MemberFactory\n\n","\nimport mongoose, { Schema } from \"mongoose\";\nimport { IMember } from \"models/member.model\";\n\nconst MemberSchema = new Schema<IMember>({\n    id: String,\n    humanId: String,\n    towerId: String,\n    secret: Schema.Types.Mixed\n})\n\nlet Member: mongoose.Model<IMember>\n\nlet prepare = () => {\n    Member = mongoose.model<IMember>('Member', MemberSchema, 'Member')\n}\n\nexport { Member, prepare }\n","\nimport mongoose, { ClientSession } from \"mongoose\";\nimport { Pending } from \"../schema/pending.schema\";\nimport { IPending } from \"models/pending.model\";\n\nclass PendingFactory {\n    static _instance: PendingFactory;\n    static initialize(): PendingFactory {\n        return new PendingFactory();\n    }\n    static get instance(): PendingFactory {\n        return PendingFactory._instance;\n    }\n    constructor() {\n        PendingFactory._instance = this;\n    }\n    async create(initData: IPending, session: ClientSession): Promise<IPending> {\n        return (await Pending.create([initData], { session }))[0].toObject();\n    }\n    async read(offset: number, count: number, query: any): Promise<Array<IPending>> {\n        let cursor: mongoose.mongo.FindCursor;\n        let collection = mongoose.connection.db.collection('Pending');\n        if ((await collection.count()) - offset >= 0) {\n            cursor = collection.find(query ? query : {}).skip(offset).limit(count);\n        } else {\n            cursor = collection.find(query ? query : {}).skip(0).limit(count);\n        }\n        return await cursor.toArray();\n    }\n    async find(query: any, session: ClientSession): Promise<IPending> {\n        return await Pending.findOne(query).session(session).lean().exec();\n    }\n    async findGroup(query: any, session: ClientSession): Promise<Array<IPending>> {\n        return await Pending.find(query).session(session).lean().exec();\n    }\n    async update(query: any, update: any, session: ClientSession): Promise<IPending> {\n        return await Pending.findOneAndUpdate(query, update, { new: true }).session(session).lean();\n    }\n    async remove(query: any, session: ClientSession): Promise<void> {\n        await Pending.deleteOne(query).session(session);\n    }\n}\n\nexport default PendingFactory\n","\nimport mongoose, { Schema } from \"mongoose\";\nimport { IPending } from \"../../models/pending.model\";\n\nconst PendingSchema = new Schema<IPending>({\n    cCode: { type: String, required: true },\n    vCode: { type: String, required: true },\n    email: { type: String, required: true },\n    humanId: { type: String },\n    progress: { type: String, required: true }\n})\n\nlet Pending: mongoose.Model<IPending>\n\nlet prepare = () => {\n    Pending = mongoose.model<IPending>('Pending', PendingSchema, 'Pending')\n}\n\nexport { Pending, prepare }\n\n","\nimport mongoose, { ClientSession } from \"mongoose\";\nimport { Invite } from \"../schema/invite.schema\";\nimport { IInvite } from \"models/invite.model\";\n\nclass InviteFactory {\n    static _instance: InviteFactory;\n    static initialize(): InviteFactory {\n        return new InviteFactory();\n    }\n    static get instance(): InviteFactory {\n        return InviteFactory._instance;\n    }\n    constructor() {\n        InviteFactory._instance = this;\n    }\n    async create(initData: IInvite, session: ClientSession): Promise<IInvite> {\n        return (await Invite.create([initData], { session }))[0].toObject();\n    }\n    async read(query?: any, offset?: number, count?: number): Promise<Array<IInvite>> {\n        let cursor: mongoose.mongo.FindCursor\n        let collection = mongoose.connection.db.collection('Invite');\n        if (offset && count) {\n            if ((await collection.count()) - offset >= 0) {\n                cursor = collection.find(query ? query : {}).skip(offset).limit(count);\n            } else {\n                cursor = collection.find(query ? query : {}).skip(0).limit(count);\n            }\n        } else {\n            cursor = collection.find(query ? query : {});\n        }\n        return await cursor.toArray();\n    }\n    async find(query: any, session?: ClientSession): Promise<IInvite> {\n        if (session) {\n            return await Invite.findOne(query).session(session).lean().exec();\n        } else {\n            return await Invite.findOne(query).lean().exec();\n        }\n    }\n    async findGroup(query: any, session: ClientSession): Promise<Array<IInvite>> {\n        return await Invite.find(query).session(session).lean().exec();\n    }\n    async update(query: any, update: any, session: ClientSession): Promise<IInvite> {\n        return await Invite.findOneAndUpdate(query, update, { new: true }).session(session).lean();\n    }\n    async remove(query: any, session: ClientSession): Promise<void> {\n        await Invite.deleteOne(query).session(session);\n    }\n}\n\nexport default InviteFactory\n","\nimport mongoose, { Schema } from \"mongoose\";\nimport { IInvite } from \"models/invite.model\";\n\nconst InviteSchema = new Schema<IInvite>({\n    id: String,\n    humanId: String,\n    towerId: String\n})\n\nlet Invite: mongoose.Model<IInvite>\n\nlet prepare = () => {\n    Invite = mongoose.model<IInvite>('Invite', InviteSchema, 'Invite')\n}\n\nexport { Invite, prepare }\n","import mongoose, { connect } from 'mongoose';\nimport addresses from '../../config';\n\nconst connectMongoClient = async () => {\n  await connect(addresses['MONGODB_URI'])\n}\n\nexport {\n  connectMongoClient\n}","\nexport let config = {\n    TEMP_STORAGE: \"\"\n}\n\nconst setupConfig = (conf: { [id: string]: any }) => {\n    for (let key in conf) {\n        config[key] = conf[key]\n    }\n}\n\nexport default config\nexport {\n    setupConfig\n}\n","import mongoose, { Schema } from \"mongoose\";\nimport { IBot } from \"models/bot.model\";\n\nconst BotSchema = new Schema<IBot>({\n    id: String,\n    title: String,\n    avatarId: String,\n    secret: Schema.Types.Mixed\n})\n\nlet Bot: mongoose.Model<IBot>\n\nlet prepare = () => {\n    Bot = mongoose.model<IBot>('Bot', BotSchema, 'Bot')\n}\n\nexport { Bot, prepare }\n","\nimport mongoose, { Schema } from \"mongoose\";\nimport { IWorker } from \"models/worker.model\";\nimport flat from 'flat'\n\nconst WorkerSchema = new Schema<IWorker>({\n    id: String,\n    machineId: String,\n    roomId: String,\n    secret: Schema.Types.Mixed\n})\n\nlet Worker: mongoose.Model<IWorker>\n\nlet prepare = () => {\n    Worker = mongoose.model<IWorker>('Worker', WorkerSchema, 'Worker')\n}\n\nexport { Worker, prepare }\n","\nimport mongoose, { Schema } from \"mongoose\";\nimport { IMachine } from \"../../models/machine.model\";\n\nconst MachineSchema = new Schema<IMachine>({\n    id: String,\n    name: String,\n    secret: Schema.Types.Mixed\n})\n\nlet Machine: mongoose.Model<IMachine>\n\nlet prepare = () => {\n    Machine = mongoose.model<IMachine>('Machine', MachineSchema, 'Machine')\n}\n\nexport { Machine, prepare }\n","import * as HumanSchema from \"./human.schema\"\nimport * as BotSchema from \"./bot.schema\"\nimport * as InviteSchema from \"./invite.schema\"\nimport * as MemberSchema from \"./member.schema\"\nimport * as RoomSchema from \"./room.schema\"\nimport * as TowerSchema from \"./tower.schema\"\nimport * as WorkerSchema from \"./worker.schema\"\nimport * as PendingSchema from \"./pending.schema\"\nimport * as SessionSchema from \"./session.schema\"\nimport * as MachineSchema from './machine.schema'\n\nlet build = () => {\n    PendingSchema.prepare()\n    SessionSchema.prepare()\n    HumanSchema.prepare()\n    BotSchema.prepare()\n    InviteSchema.prepare()\n    MemberSchema.prepare()\n    RoomSchema.prepare()\n    TowerSchema.prepare()\n    MachineSchema.prepare()\n    WorkerSchema.prepare()\n}\n\nexport {\n    build,\n    HumanSchema,\n    BotSchema,\n    InviteSchema,\n    MemberSchema,\n    PendingSchema,\n    RoomSchema,\n    SessionSchema,\n    TowerSchema,\n    WorkerSchema,\n    MachineSchema\n}","\nimport mongoose, { ClientSession } from \"mongoose\";\nimport { Machine } from \"database/schema/machine.schema\";\nimport { IMachine } from \"models/machine.model\";\n\nclass MachineFactory {\n    static _instance: MachineFactory;\n    static initialize(): MachineFactory {\n        return new MachineFactory();\n    }\n    static get instance(): MachineFactory {\n        return MachineFactory._instance;\n    }\n    constructor() {\n        MachineFactory._instance = this;\n    }\n    async create(initData: IMachine, session: ClientSession): Promise<IMachine> {\n        return (await Machine.create([initData], { session }))[0].toObject();\n    }\n    async read(offset?: number, count?: number, query?: any): Promise<Array<IMachine>> {\n        let cursor: mongoose.mongo.FindCursor;\n        let collection = mongoose.connection.db.collection('Machine');\n        if ((await collection.count()) - offset >= 0) {\n            cursor = collection.find(query ? query : {}).skip(offset).limit(count);\n        } else {\n            cursor = collection.find(query ? query : {}).skip(0).limit(count);\n        }\n        return await cursor.toArray();\n    }\n    async find(query: any, session: ClientSession): Promise<IMachine> {\n        return await Machine.findOne(query).session(session).lean().exec();\n    }\n    async findGroup(query: any, session: ClientSession): Promise<Array<IMachine>> {\n        return await Machine.find(query).session(session).lean().exec();\n    }\n    async update(query: any, update: any, session: ClientSession): Promise<IMachine> {\n        return await Machine.findOneAndUpdate(query, update, { new: true }).session(session).lean();\n    }\n    async remove(query: any, session: ClientSession): Promise<void> {\n        await Machine.deleteOne(query).session(session);\n    }\n}\n\nexport default MachineFactory\n","\nimport mongoose, { ClientSession } from \"mongoose\";\nimport { IWorker } from \"models/worker.model\";\nimport { Worker } from \"database/schema/worker.schema\";\n\nclass WorkerFactory {\n    static _instance: WorkerFactory;\n    static initialize(): WorkerFactory {\n        return new WorkerFactory();\n    }\n    static get instance(): WorkerFactory {\n        return WorkerFactory._instance;\n    }\n    constructor() {\n        WorkerFactory._instance = this;\n    }\n    async create(initData: IWorker, session: ClientSession): Promise<IWorker> {\n        return (await Worker.create([initData], { session }))[0].toObject();\n    }\n    async update(query: any, update: any, session: ClientSession): Promise<IWorker> {\n        return Worker.findOneAndUpdate(query, update, { new: true }).session(session).lean();\n    }\n    async replace(query: any, newOne: any, session: ClientSession): Promise<IWorker> {\n        return Worker.findOneAndReplace(query, newOne, { new: true }).session(session).lean();\n    }\n    async read(query: any): Promise<Array<IWorker>> {\n        let cursor: mongoose.mongo.FindCursor;\n        let collection = mongoose.connection.db.collection('Worker');\n        cursor = collection.find(query);\n        return await cursor.toArray();\n    }\n    async find(query: any, session?: ClientSession): Promise<IWorker> {\n        return Worker.findOne(query).session(session).lean().exec();\n    }\n    async remove(query: any, session: ClientSession): Promise<void> {\n        await Worker.deleteOne(query).session(session);\n    }\n}\n\nexport default WorkerFactory\n","\nimport HumanFactory from './factories/human.factory';\nimport TowerFactory from './factories/tower.factory';\nimport RoomFactory from './factories/room.factory';\nimport SessionFactory from './factories/session.factory';\nimport MemberFactory from './factories/member.factory';\nimport PendingFactory from './factories/pending.factory';\nimport InviteFactory from './factories/invite.factory';\nimport { connectMongoClient } from './drivers/main-driver';\nimport * as Schemas from './schema';\nimport { MachineFactory, WorkerFactory } from './factories';\n\nclass StorageDriver {\n    static _instancce: StorageDriver;\n    public static get instance() { return StorageDriver._instancce }\n    static initialize(callback: () => void) {\n        return new StorageDriver(callback);\n    }\n    constructor(callback: () => void) {\n        StorageDriver._instancce = this;\n        connectMongoClient().then(() => {\n            Schemas.build()\n            HumanFactory.initialize();\n            TowerFactory.initialize();\n            RoomFactory.initialize();\n            InviteFactory.initialize();\n            MemberFactory.initialize();\n            PendingFactory.initialize();\n            SessionFactory.initialize();\n            MachineFactory.initialize();\n            WorkerFactory.initialize();\n            callback()\n        });\n    }\n}\n\nexport default StorageDriver;\n","\nimport { Server, Socket } from \"socket.io\";\nimport express from 'express';\nimport { Request, Response, Express } from \"express\"\nimport { createServer, Server as HttpServer } from 'node:http';\nimport \"reflect-metadata\";\nimport BaseController from \"../../controllers/base.controller\";\nimport BaseService from \"../../services/base.service\";\nimport Client from \"./client\";\nimport { createAdapter } from \"@socket.io/redis-adapter\";\nimport MemoryDriver from \"../memory/memory\";\nimport { Emitter } from \"@socket.io/redis-emitter\";\nimport * as json from '../../utils/json'\nimport HumanController from \"../../controllers/human.controller\";\nimport CustomController from \"../../controllers/custom.controller\";\nimport config from '../../config';\nimport cors from 'cors';\nimport * as Factories from '../../database/factories';\nimport { IHuman } from \"models/human.model\";\n\nclass NetworkDriver {\n    static _instance: NetworkDriver\n    static get instance() { return NetworkDriver._instance }\n    static initialize(callback: any) {\n        return new NetworkDriver(callback)\n    }\n    app: Express\n    server: HttpServer\n    io: Server\n    controllers: { [id: string]: BaseController } = {}\n    services: { [id: string]: BaseService } = {}\n    clients: { [id: string]: Client } = {}\n    restSessions: { [id: string]: Client } = {}\n    lastSeens: { [id: string]: number } = {}\n    private emitter: Emitter\n    public group(towerId: string) {\n        return {\n            emit: (packet: any) => {\n                this.io.to(towerId).emit('update', JSON.parse(json.safeStringify(packet)))\n            },\n            boradcast: {\n                emit: (client: Client, packet: any) => {\n                    client.socket.broadcast.to(towerId).emit('update', JSON.parse(json.safeStringify(packet)))\n                }\n            }\n        }\n    }\n    public keepClient(token: string, client: Client) {\n        this.clients[client.humanId] = client\n        this.restSessions[token] = client\n    }\n    public looseClient(client: Client) {\n        client.token && (delete this.restSessions[client.token])\n        client.humanId && (delete this.clients[client.humanId])\n    }\n    public registerController<T extends BaseController, V extends BaseService>(type: { new(...args: any[]): T; }, type2: { new(...args: any[]): V; }, meta?: any) {\n        let service = meta ? new type2(meta) : new type2()\n        let controller = new type(service)\n        this.services[controller.getName()] = service\n        this.controllers[controller.getName()] = controller\n    }\n    public registerCustomController(controller: CustomController) {\n        this.controllers[controller.getName()] = controller\n    }\n    private creaateWelcomeRoute() {\n        this.app.get('/', (req: Request, res: Response) => {\n            res.send('<h1>Welcome to Sigma !</h1>')\n        })\n    }\n    private startExpressServer() {\n        this.server.listen(config['SOCKET_PORT'], () => {\n            console.log(`server running at http://localhost:${config['SOCKET_PORT']}`)\n        })\n    }\n    private route(client: Client, path: string, body: any, requestId: string, callback: any) {\n        let parts = path.split('/')\n        let controller = this.controllers[parts[0]]\n        if (controller instanceof CustomController) {\n            controller.route(parts.slice(1), client, body, requestId, callback).catch((ex: any) => console.log(ex))\n        } else {\n            controller[parts[1]](client, body, requestId, callback).catch((ex: any) => console.log(ex))\n        }\n    }\n    private routeRest(client: Client, path: string, req: express.Request, res: express.Response) {\n        console.log(path)\n        let parts = path.split('/')\n        let controller = this.controllers[parts[0]]\n        if (controller instanceof CustomController) {\n            controller.routeRest(parts.slice(1), client, req, res).catch((ex: any) => console.log(ex))\n            return true\n        } else {\n            return false\n        }\n    }\n    constructor(callback) {\n        NetworkDriver._instance = this\n        Factories.HumanFactory.instance.read().then((humans: Array<IHuman>) => {\n            humans.forEach(human => {\n                this.lastSeens[human.id] = human.secret.lastSeen\n            })\n            this.app = express()\n            this.app.use(cors())\n            this.app.use(express.urlencoded({ extended: true }))\n            this.app.use(express.json())\n            this.server = createServer(this.app)\n            this.io = new Server(this.server, {\n                cors: {\n                    origin: \"*\",\n                },\n                maxHttpBufferSize: 1e8\n            })\n            let subClient = MemoryDriver.instance.redisClient.duplicate()\n            this.io.adapter(createAdapter(MemoryDriver.instance.redisClient, subClient));\n            this.emitter = new Emitter(MemoryDriver.instance.redisClient);\n            this.creaateWelcomeRoute()\n            this.startExpressServer()\n            this.io.on('connection', (socket: Socket) => {\n                console.log('a client connected');\n                let client = new Client(socket, this.emitter)\n                socket.on('disconnect', async () => {\n                    console.log('client disconnected');\n                    delete this.clients[client.humanId]\n                    let humanId = client.humanId\n                    if (humanId) {\n                        let controller: HumanController = this.controllers['human'] as HumanController\n                        let result = await controller.service.signOut(client, 'EMPTY')\n                        if (result.success) {\n                            this.lastSeens[humanId] = result.lastSeen\n                        }\n                    }\n                });\n                socket.onAny((...args) => {\n                    this.route(client, args[0], args[1], args[2], args[3]);\n                })\n            });\n            this.app.all('*', (req: express.Request, res: express.Response, next: any) => {\n                if (!this.routeRest(this.restSessions[req.headers['token']?.toString()], req.path.substring(1), req, res)) {\n                    next();\n                }\n            })\n            callback()\n        })\n    }\n}\n\nexport default NetworkDriver\n","\nconst safeStringify = (obj: any, indent = 2) => {\n    let cache = [];\n    const retVal = JSON.stringify(\n        obj,\n        (key, value) =>\n            typeof value === \"object\" && value !== null\n                ? cache.includes(value)\n                    ? undefined // Duplicate reference found, discard key\n                    : cache.push(value) && value // Store value in our collection\n                : value,\n        indent\n    );\n    cache = null;\n    return retVal;\n};\n\nexport {\n    safeStringify\n}","import { Emitter } from \"@socket.io/redis-emitter\";\nimport { Socket } from \"socket.io\";\nimport * as json from '../../utils/json'\nimport NetworkDriver from \"./network\";\n\nclass Client {\n\n    socket: Socket\n    isGuest: boolean\n    humanId: string\n    towerId: string\n    rights: { [id: string]: boolean }\n    emitter: Emitter\n    token: string\n\n    public reset() {\n        this.updateToken(undefined)\n        this.updateHumanId(undefined)\n        this.updateTowerId(undefined, undefined)\n    }\n\n    public updateToken(token: string) {\n        this.token = token\n    }\n\n    public updateHumanId(humanId: string) {\n        this.humanId = humanId\n    }\n\n    public updateTowerId(towerId: string, rights: { [id: string]: boolean }) {\n        this.towerId = towerId\n        this.rights = rights\n    }\n\n    public emit(update: any) {\n        this.socket.emit('update', JSON.parse(json.safeStringify(update)))\n    }\n\n    public joinTower(towerId: string) {\n        this.socket.join(towerId)\n    }\n\n    public leaveTower(towerId: string) {\n        this.socket.leave(towerId)\n    }\n\n    public joinTowers(towerIds: Array<string>) {\n        this.socket.join(towerIds)\n    }\n\n    public leaveTowers(towerIds: Array<string>) {\n        towerIds.forEach(towerId => this.leaveTower(towerId))\n    }\n\n    constructor(socket: Socket, emitter: Emitter) {\n        this.socket = socket\n        this.emitter = emitter\n    }\n}\n\nexport default Client\n","\nimport express from 'express'\nimport * as redis from 'redis';\nimport config from '../../config';\nimport session from 'express-session';\nimport bodyParser from 'body-parser';\nimport SessionFactory from '../../database/factories/session.factory';\nimport MemberFactory from '../../database/factories/member.factory';\nimport cors from \"cors\";\nimport { ISession } from '../../models/session.model'\nimport RedisStore from \"connect-redis\"\n\nclass MemoryDriver {\n    static _instance: MemoryDriver;\n    static initialize(): MemoryDriver {\n        return new MemoryDriver();\n    }\n    static get instance(): MemoryDriver {\n        return MemoryDriver._instance;\n    }\n    redisClient: redis.RedisClientType;\n    async save(key: string, value: any): Promise<any> {\n        await this.redisClient.set(key, JSON.stringify(value));\n    }\n    async remove(key: string | Array<string>): Promise<void> {\n        await this.redisClient.del(key);\n    }\n    fetch(key: string): Promise<any> {\n        return new Promise(resolve => {\n            this.redisClient.get(key).then(function (obj) {\n                if (!obj) {\n                    console.log('key not found:', key);\n                    resolve(undefined);\n                    return;\n                }\n                resolve(JSON.parse(obj));\n            });\n        })\n    }\n    loadAuthIntoMemory() {\n        SessionFactory.instance.read().then((ss: Array<ISession>) => {\n            ss.forEach(s => {\n                this.save(`auth:${s.token}`, s.humanId);\n            });\n        });\n        MemberFactory.instance.read().then(ms => {\n            ms.forEach(m => {\n                this.save(`rights:${m.towerId}/${m.humanId}`, JSON.stringify(m.secret.permissions));\n            });\n        });\n    }\n    constructor() {\n        MemoryDriver._instance = this;\n        this.redisClient = redis.createClient({ url: config['REDIS_URI'] });\n        this.redisClient.connect().then(async () => {\n            this.redisClient.on('error', function (err) {\n                console.log('Could not establish a connection with redis. ' + err);\n            });\n            this.redisClient.on('connect', function (err) {\n                console.log('Connected to redis successfully');\n            });\n            this.loadAuthIntoMemory();\n        });\n    }\n}\n\nexport default MemoryDriver\n","\nabstract class BaseController {\n    abstract getName(): string\n}\n\nexport default BaseController\n","\nimport Client from \"../drivers/network/client\";\nimport BaseController from \"./base.controller\";\nimport BaseMachine from \"machines/base.machine\";\nimport express from 'express'\n\nclass CustomController extends BaseController {\n    service: BaseMachine\n    name: string\n    constructor(name: string, service: BaseMachine) {\n        super()\n        this.name = name\n        this.service = service\n    }\n    getName(): string { return this.name }\n    async route(key: Array<string>, client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.route(key, client, body)\n        response(result)\n    }\n    async routeRest(key: Array<string>, client: Client, req: express.Request, res: express.Response) {\n        await this.service.routeRest(key, client, req, res)\n    }\n}\n\nexport default CustomController\n","\nimport signIn from \"./signIn\";\nimport signUp from \"./signUp\";\nimport verify from \"./verify\";\nimport complete from \"./complete\";\nimport readById from \"./readById\";\nimport search from './search'\nimport signOut from \"./signOut\";\nimport readGroupById from \"./readGroupById\";\nimport update from \"./update\";\n\nexport {\n    signIn,\n    signUp,\n    verify,\n    complete,\n    readById,\n    search,\n    signOut,\n    readGroupById,\n    update\n}\n","\nimport { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\n\nconst signIn = async (args: { humanId: string }, _session?: ClientSession) => {\n  await Factories.HumanFactory.instance.update({ id: args.humanId }, { $set: { 'secret.lastSeen': -1 } });\n  let memberships = await Factories.MemberFactory.instance.read({ humanId: args.humanId })\n  return { success: true, memberships };\n}\n\nexport default signIn\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport { isEmpty } from '../../../utils/strings';\nimport PendingFactory from '../../factories/pending.factory';\nimport { makeUniqueId } from '../../../utils/generator';\nimport { IPending } from '../../../models/pending.model';\n\nconst signUp = async (args: { email: string }, _session?: ClientSession) => {\n  if (isEmpty(args.email)) {\n    console.error('email can not be empty');\n    return { success: false };\n  }\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let pending: IPending\n  try {\n    let success = false;\n    pending = await PendingFactory.instance.find({ email: args.email }, session);\n    let vCode = '123', cCode = makeUniqueId();\n    if (pending === null) {\n      pending = await PendingFactory.instance.create({\n        email: args.email,\n        cCode: cCode,\n        vCode: vCode,\n        progress: 'registered'\n      }, session);\n      if (!_session) await session.commitTransaction();\n      success = true;\n    } else {\n      await PendingFactory.instance.update({ email: args.email }, { cCode, vCode, progress: 'registered' }, session);\n      if (!_session) await session.commitTransaction();\n      success = true;\n    }\n    if (!_session) session.endSession();\n    if (success) {\n      return { success: true, cCode };\n    } else {\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default signUp\n","\nconst isEmpty = (str) => {\n    return (str === undefined || str === null || str.length === 0);\n};\n\nconst isNameFieldInvalid = (str) => {\n    if (str === undefined || str === null) return true;\n    return str.length > 64;\n};\n\nconst isInviteTitleInvalid = (str) => {\n    if (str === undefined || str === null) return false;\n    return str.length > 64;\n};\n\nconst isInviteTextInvalid = (str) => {\n    if (str === undefined || str === null) return false;\n    return str.length > 512;\n};\n\nconst isWorkspaceTitleInvalid = (str) => {\n    if (str === undefined || str === null) return false;\n    return str.length > 64;\n};\n\nconst isFileBoxTitleInvalid = (str) => {\n    if (str === undefined || str === null) return false;\n    return str.length > 64;\n};\n\nconst isListDescriptionInvalid = (str) => {\n    if (str === undefined || str === null) return false;\n    return str.length > 200;\n};\n\nexport {\n    isEmpty,\n    isFileBoxTitleInvalid,\n    isInviteTextInvalid,\n    isInviteTitleInvalid,\n    isListDescriptionInvalid,\n    isNameFieldInvalid,\n    isWorkspaceTitleInvalid,\n}","import * as crypto from \"crypto\";\n\nconst makeUniqueId = () => {\n    return crypto.randomBytes(16).toString(\"hex\");\n}\n\nexport {\n    makeUniqueId\n}\n","\nimport mongoose, { ClientSession } from 'mongoose'\nimport * as Factories from '../../factories';\nimport { makeUniqueId } from '../../../utils/generator';\nimport { IPending } from '../../../models/pending.model';\nimport { ISession } from '../../../models/session.model';\nimport { IHuman } from '../../../models/human.model';\nimport config from 'config';\n\nconst verify = async (args: { cCode?: string, vCode?: string, accessToken?: string }, _session?: ClientSession) => {\n    const session = _session ? _session : await mongoose.startSession();\n    if (!_session) session.startTransaction();\n    let pending: IPending, userSession: ISession, human: IHuman;\n    try {\n        let handlePostAuth = async () => {\n            human = await Factories.HumanFactory.instance.find({ id: pending.humanId }, session);\n            if (human !== null) {\n                userSession = await Factories.SessionFactory.instance.create({\n                    id: makeUniqueId(),\n                    token: makeUniqueId(),\n                    humanId: human.id\n                }, session);\n                human = await Factories.HumanFactory.instance.update({ id: human.id }, { $push: { sessionIds: userSession.id } }, session);\n                let memberships = await Factories.MemberFactory.instance.findGroup({ humanId: human.id }, session);\n                let towers = await Factories.TowerFactory.instance.findGroup({ id: { $in: memberships.map(m => m.towerId) } }, session);\n                let rooms = await Factories.RoomFactory.instance.findGroup({ towerId: { $in: memberships.map(m => m.towerId) } }, session);\n                if (!_session) {\n                    await session.commitTransaction();\n                    session.endSession();\n                }\n                return {\n                    success: true,\n                    session: userSession,\n                    human: human,\n                    towers: towers,\n                    rooms: rooms,\n                    memberships: memberships\n                };\n            } else {\n                if (args.accessToken) {\n                    await Factories.PendingFactory.instance.update({ cCode: args.accessToken }, { progress: 'verified' }, session);\n                } else {\n                    await Factories.PendingFactory.instance.update({ cCode: args.cCode, vCode: args.vCode }, { progress: 'verified' }, session);\n                }\n                if (!_session) {\n                    await session.commitTransaction();\n                    session.endSession();\n                }\n                return { success: true };\n            }\n        }\n        if (args.accessToken) {\n            let d = Buffer.from(args.accessToken.split('.')[1], 'base64').toString()\n            const inputData = JSON.parse(d);\n            let email = inputData[config['AUTH0_TOKEN_EMAIL_DECODER_KEY']];\n            pending = await Factories.PendingFactory.instance.find({ email }, session);\n            if (pending !== null) {\n                pending = await Factories.PendingFactory.instance.update({ email }, { progress: 'verified', cCode: args.accessToken, vCode: args.accessToken }, session);\n            } else {\n                pending = await Factories.PendingFactory.instance.create({ progress: 'verified', email, cCode: args.accessToken, vCode: args.accessToken }, session);\n            }\n            return await handlePostAuth();\n        } else {\n            pending = await Factories.PendingFactory.instance.find({ vCode: args.vCode, cCode: args.cCode }, session);\n            if (pending !== null) {\n                return await handlePostAuth();\n            } else {\n                if (!_session) {\n                    await session.abortTransaction();\n                    session.endSession();\n                }\n                return { success: false };\n            }\n        }\n    } catch (error) {\n        console.error(error);\n        console.error('abort transaction');\n        if (!_session) {\n            await session.abortTransaction();\n            session.endSession();\n        }\n        return { success: false };\n    }\n}\n\nexport default verify\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport { isEmpty, isNameFieldInvalid } from '../../../utils/strings';\nimport permissions from '../../../permissions.json';\nimport { makeUniqueId } from '../../../utils/generator';\nimport { IPending } from '../../../models/pending.model';\nimport { IHuman } from '../../../models/human.model';\nimport { ISession } from '../../../models/session.model';\nimport { ITower } from '../../../models/tower.model';\nimport { IRoom } from '../../../models/room.model';\nimport { IMember } from '../../../models/member.model';\nimport * as Factories from '../../factories'\n\nconst complete = async (args: { cCode: string, firstName: string, lastName?: string, creationCallback: any }, _session?: ClientSession) => {\n    if (isEmpty(args.firstName)) {\n        console.error('first name can not be empty');\n        return { success: false };\n    }\n    if (isNameFieldInvalid(args.firstName)) {\n        console.error('name can not be longer than limit.');\n        return { success: false };\n    }\n    const session = _session ? _session : await mongoose.startSession();\n    if (!_session) session.startTransaction();\n    let pending: IPending, human: IHuman, sess: ISession, tower: ITower, room: IRoom, member: IMember\n    try {\n        pending = await Factories.PendingFactory.instance.find({ cCode: args.cCode }, session);\n        if (pending?.progress === 'verified') {\n            let userGenedId = makeUniqueId();\n            sess = await Factories.SessionFactory.instance.create({\n                id: makeUniqueId(),\n                token: makeUniqueId(),\n                humanId: userGenedId,\n            }, session);\n            let towerGenedId = makeUniqueId();\n            let roomGenedId = makeUniqueId();\n            human = await Factories.HumanFactory.instance.create({\n                id: userGenedId,\n                firstName: args.firstName,\n                lastName: args.lastName,\n                secret: {\n                    email: pending.email,\n                    homeId: towerGenedId,\n                    sessionIds: [sess.id]\n                }\n            }, session);\n            await Factories.PendingFactory.instance.update({ cCode: args.cCode }, { humanId: human.id }, session)\n            tower = await Factories.TowerFactory.instance.create({\n                id: towerGenedId,\n                title: `${args.firstName}'s home`,\n                avatarId: 'EMPTY',\n                isPublic: false,\n                secret:\n                {\n                    ownerId: human.id,\n                    adminIds: [\n                        userGenedId\n                    ]\n                }\n            }, session);\n            room = await Factories.RoomFactory.instance.create({\n                id: roomGenedId,\n                title: 'hall',\n                avatarId: 'EMPTY',\n                isPublic: false,\n                floor: 'hall',\n                towerId: towerGenedId,\n                secret: {\n                    adminIds: [\n                        userGenedId\n                    ]\n                }\n            }, session);\n            args.creationCallback && await args.creationCallback(room, session)\n            member = await Factories.MemberFactory.instance.create({\n                id: makeUniqueId(),\n                humanId: human.id,\n                towerId: tower.id,\n                secret: {\n                    permissions: permissions.DEFAULT_ROOM_ADMIN_PERMISSIONS\n                }\n            }, session);\n            if (!_session) {\n                await session.commitTransaction();\n                session.endSession();\n            }\n            return {\n                success: true,\n                session: sess,\n                human,\n                tower,\n                room,\n                member,\n            };\n        } else {\n            if (!_session) {\n                await session.abortTransaction();\n                session.endSession();\n            }\n            return { success: false };\n        }\n    } catch (error) {\n        console.error(error);\n        console.error('abort transaction');\n        if (!_session) {\n            await session.abortTransaction();\n            session.endSession();\n        }\n        return { success: false };\n    }\n}\n\nexport default complete\n","{\n    \"DEFAULT_ROOM_MEMBER_PERMISSIONS\": {},\n    \"DEFAULT_ROOM_ADMIN_PERMISSIONS\": {}\n}","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories';\n\nconst readById = async (args: { targetHumanId: string }, _session?: ClientSession) => {\n  try {\n    let human = await Factories.HumanFactory.instance.find({ id: args.targetHumanId });\n    return { success: true, human };\n  } catch (error) {\n    console.error(error);\n    return { success: false };\n  }\n}\n\nexport default readById\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport { secureObject } from '../../../utils/filter';\nimport * as Factories from '../../factories';\n\nconst search = async (args: { query: string, offset?: number, count?: number }, _session?: ClientSession) => {\n  try {\n    let data = await Factories.HumanFactory.instance.read(args.offset, args.count, {\n      $or: [\n        { firstName: { '$regex': args.query, '$options': 'i' } },\n        { lastName: { '$regex': args.query, '$options': 'i' } }\n      ],\n    });\n    return { success: true, humans: data };\n  } catch (error) {\n    return { success: false };\n  }\n}\n\nexport default search\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories';\n\nconst signOut = async (args: { humanId: string }, _session?: ClientSession) => {\n  try {\n    let lastSeen = Date.now()\n    await Factories.HumanFactory.instance.update({ id: args.humanId }, { $set: { 'secret.lastSeen': lastSeen } });\n    let memberships = await Factories.MemberFactory.instance.read({ humanId: args.humanId })\n    return { success: true, memberships, lastSeen };\n  } catch (error) {\n    console.error(error);\n    return { success: false };\n  }\n}\n\nexport default signOut\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories';\n\nconst readGroupById = async (args: { targetHumanIds: Array<string> }, _session?: ClientSession) => {\n  try {\n    let humans = await Factories.HumanFactory.instance.findGroup({ id: { $in: args.targetHumanIds } });\n    return { success: true, humans };\n  } catch (error) {\n    console.error(error);\n    return { success: false };\n  }\n}\n\nexport default readGroupById\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\n\nconst update = async (args: { firstName?: string, lastName?: string, humanId: string }, _session?: ClientSession) => {\n    const session = _session ? _session : await mongoose.startSession();\n    if (!_session) session.startTransaction();\n    try {\n        let human = await Factories.HumanFactory.instance.find({ id: args.humanId }, session)\n        if (human !== null) {\n            human = await Factories.HumanFactory.instance.update(\n                {\n                    id: args.humanId,\n                },\n                {\n                    firstName: args.firstName,\n                    lastName: args.lastName,\n                },\n                session\n            );\n            if (!_session) {\n                await session.commitTransaction();\n                session.endSession();\n            }\n            return {\n                success: true,\n                human\n            };\n        } else {\n            if (!_session) {\n                await session.abortTransaction();\n                session.endSession();\n            }\n            return { success: false };\n        }\n    } catch (error) {\n        console.error(error);\n        console.error('abort transaction');\n        if (!_session) {\n            await session.abortTransaction();\n            session.endSession();\n        }\n        return { success: false };\n    }\n}\n\nexport default update\n","\nimport create from \"./create\";\nimport update from \"./update\";\nimport remove from \"./remove\";\nimport search from \"./search\";\nimport join from \"./join\";\nimport readById from \"./readById\";\nimport readMembers from \"./readMembers\";\nimport read from \"./read\";\nimport addMember from \"./addMember\";\n\nexport {\n    create,\n    update,\n    remove,\n    search,\n    join,\n    readById,\n    readMembers,\n    read,\n    addMember\n}\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport { isEmpty, isNameFieldInvalid } from '../../../utils/strings';\nimport permissions from '../../../permissions.json';\nimport * as Factories from '../../factories'\nimport { makeUniqueId } from '../../../utils/generator';\nimport { ITower } from 'models/tower.model';\nimport { IRoom } from 'models/room.model';\nimport { IMember } from 'models/member.model';\n\nconst create = async (args: { title: string, avatarId: string, isPublic: boolean, ownerId: string, creationCallback?: any }, _session?: ClientSession) => {\n  if (isEmpty(args.title)) {\n    console.error('title can not be empty');\n    return { success: false };\n  }\n  if (isNameFieldInvalid(args.title)) {\n    console.error('title can not be longer than limit');\n    return { success: false };\n  }\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let tower: ITower, room: IRoom, member: IMember;\n  try {\n    tower = await Factories.TowerFactory.instance.create({\n      id: makeUniqueId(),\n      title: args.title,\n      avatarId: isEmpty(args.avatarId) ? 'EMPTY' : args.avatarId,\n      isPublic: args.isPublic,\n      secret: {\n        ownerId: args.ownerId,\n        adminIds: [\n          args.ownerId\n        ]\n      }\n    }, session);\n    room = await Factories.RoomFactory.instance.create({\n      id: makeUniqueId(),\n      title: 'hall',\n      avatarId: 'EMPTY',\n      floor: 'hall',\n      isPublic: args.isPublic,\n      towerId: tower.id,\n      secret: {\n        adminIds: [\n          args.ownerId\n        ]\n      }\n    }, session)\n    args.creationCallback && await args.creationCallback(room, session)\n    member = await Factories.MemberFactory.instance.create({\n      id: makeUniqueId(),\n      humanId: args.ownerId,\n      towerId: tower.id,\n      secret: {\n        permissions: permissions.DEFAULT_ROOM_ADMIN_PERMISSIONS\n      }\n    }, session);\n    if (!_session) {\n      await session.commitTransaction();\n      session.endSession();\n    }\n    return { success: true, tower, room, member };\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default create\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport { isEmpty, isNameFieldInvalid } from '../../../utils/strings';\nimport * as Factories from '../../factories'\n\nconst update = async (args: { towerId: string, title: string, avatarId: string, isPublic: boolean, humanId: string }, _session?: ClientSession) => {\n  if (isEmpty(args.title)) {\n    console.error('title can not be empty');\n    return { success: false };\n  }\n  if (isNameFieldInvalid(args.title)) {\n    console.error('title can not be longer than limit');\n    return { success: false };\n  }\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  try {\n    let success = false;\n    let tower = await Factories.TowerFactory.instance.find({ id: args.towerId }, session);\n    if (tower !== null) {\n      if (tower.secret.adminIds.includes(args.humanId)) {\n        tower = await Factories.TowerFactory.instance.update({ id: tower.id }, {\n          title: args.title,\n          avatarId: isEmpty(args.avatarId) ? 'EMPTY' : args.avatarId,\n          isPublic: args.isPublic\n        }, session);\n        success = true;\n        if (!_session) await session.commitTransaction();\n      } else {\n        console.error('user is not admin of the tower');\n        console.error('abort transaction');\n        if (!_session) await session.abortTransaction();\n      }\n    } else {\n      console.error('tower does not exist');\n      console.error('abort transaction');\n      if (!_session) await session.abortTransaction();\n    }\n    if (!_session) session.endSession();\n    if (success) {\n      return { success: true, tower };\n    } else {\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n};\n\nexport default update\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories';\nimport * as Schemas from '../../schema';\n\nconst remove = async (args: { towerId: string, humanId: string }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  try {\n    let memberIds: Array<string>\n    let success = false;\n    let tower = await Factories.TowerFactory.instance.find({ id: args.towerId }, session);\n    if (tower !== null) {\n      if (tower.secret.adminIds.includes(args.humanId)) {\n        memberIds = (await Factories.MemberFactory.instance.findGroup({ towerId: args.towerId }, session)).map(m => m.humanId)\n        await Factories.TowerFactory.instance.remove({ id: tower.id }, session);\n        success = true;\n        if (!_session) await session.commitTransaction();\n      } else {\n        console.error('user is not admin of the tower');\n        console.error('abort transaction');\n        if (!_session) await session.abortTransaction();\n      }\n    } else {\n      console.error('tower does not exist');\n      console.error('abort transaction');\n      if (!_session) await session.abortTransaction();\n    }\n    if (!_session) session.endSession();\n    if (success) {\n      return { success: true, tower, memberIds };\n    } else {\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n};\n\nexport default remove\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport { isReadCountEmpty, isReadCountInvalid, isIdEmpty } from '../../../utils/numbers';\nimport * as Factories from '../../factories'\nimport { ITower } from 'models/tower.model';\n\nconst search = async (args: { query: string, offset?: number, count?: number, mine?: boolean, humanId?: string }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let data: Array<ITower>;\n  try {\n    if (args.mine) {\n      let members = await Factories.MemberFactory.instance.findGroup({ userId: args.humanId }, session);\n      if (args.offset === undefined && args.count === undefined) {\n        data = await Factories.TowerFactory.instance.read(0, 100, {\n          $or: [\n            { title: { '$regex': args.query, '$options': 'i' }, id: { $in: members.map(m => m.towerId) } },\n            { description: { '$regex': args.query, '$options': 'i' }, id: { $in: members.map(m => m.towerId) } }\n          ]\n        });\n      } else {\n        data = await Factories.TowerFactory.instance.read(args.offset, args.count, {\n          $or: [\n            { title: { '$regex': args.query, '$options': 'i' }, id: { $in: members.map(m => m.towerId) } },\n            { description: { '$regex': args.query, '$options': 'i' }, id: { $in: members.map(m => m.towerId) } }\n          ]\n        });\n      }\n    } else {\n      if (args.offset === undefined && args.count === undefined) {\n        data = await Factories.TowerFactory.instance.read(0, 100, {\n          isPublic: true,\n          $or: [\n            { title: { '$regex': args.query, '$options': 'i' } },\n            { description: { '$regex': args.query, '$options': 'i' } }\n          ]\n        });\n      } else {\n        data = await Factories.TowerFactory.instance.read(args.offset, args.count, {\n          isPublic: true,\n          $or: [\n            { title: { '$regex': args.query, '$options': 'i' } },\n            { description: { '$regex': args.query, '$options': 'i' } }\n          ]\n        });\n      }\n    }\n    if (!_session) {\n      await session.commitTransaction();\n      session.endSession();\n    }\n    return { success: true, towers: data };\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default search\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport { isIdEmpty } from '../../../utils/numbers';\nimport permissions from '../../../permissions.json';\nimport { secureObject, secureAdmins } from '../../../utils/filter';\nimport { makeUniqueId } from '../../../utils/generator';\nimport { IMember } from 'models/member.model';\nimport { IHuman } from 'models/human.model';\nimport { IRoom } from 'models/room.model';\nimport { ITower } from 'models/tower.model';\nimport * as Factories from '../../factories'\n\nconst join = async (args: { towerId: string, requesterId: string }, _session?: ClientSession) => {\n  if (isIdEmpty(args.towerId)) {\n    console.error('tower id can not be empty');\n    return { success: false };\n  }\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let member: IMember, tower: ITower;\n  try {\n    tower = await Factories.TowerFactory.instance.find({ id: args.towerId }, session);\n    if (tower.isPublic) {\n      member = await Factories.MemberFactory.instance.find({ humanId: args.requesterId, towerId: args.towerId }, session);\n      if (member === null) {\n        member = await Factories.MemberFactory.instance.create({\n          id: makeUniqueId(),\n          humanId: args.requesterId,\n          towerId: args.towerId,\n          secret: {\n            permissions: permissions.DEFAULT_ROOM_ADMIN_PERMISSIONS\n          }\n        }, session);\n        if (!_session) {\n          await session.commitTransaction();\n          session.endSession();\n        }\n        return {\n          success: true,\n          member: member,\n        };\n      } else {\n        console.log('you are already a member of this tower.')\n        if (!_session) {\n          console.error('abort transaction');\n          await session.abortTransaction();\n          session.endSession();\n        }\n        return { success: false };  \n      }\n    } else {\n      if (!_session) {\n        console.error('abort transaction');\n        await session.abortTransaction();\n        session.endSession();\n      }\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(error);\n    if (!_session) {\n      console.error('abort transaction');\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default join\n","\nconst isIdEmpty = (id: string) => {\n    return id === undefined || id === null || id.length === 0;\n};\n\nconst isReadOffsetEmpty = (offset: number) => {\n    return offset <= 0;\n};\n\nconst isReadCountEmpty = (count: number) => {\n    return count <= 0 || count === undefined || count === null;\n};\n\nconst isReadCountInvalid = (count: number) => {\n    return count > 100;\n};\n\nexport {\n    isIdEmpty,\n    isReadCountEmpty,\n    isReadCountInvalid,\n    isReadOffsetEmpty\n}\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\nimport { ITower } from 'models/tower.model';\nimport { IRoom } from 'models/room.model';\n\nconst readById = async (args: { towerId: string, humanId?: string }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let tower: ITower, rooms: Array<IRoom>;\n  try {\n    let success = false\n    tower = await Factories.TowerFactory.instance.find({ id: args.towerId }, session);\n    if (tower !== null) {\n      if (tower.isPublic) {\n        success = true\n      } else {\n        if (args.humanId) {\n          let member = await Factories.MemberFactory.instance.find({ humanId: args.humanId, towerId: args.towerId }, session)\n          success = (member !== null)\n        }\n      }\n    }\n    if (success) {\n      rooms = await Factories.RoomFactory.instance.findGroup({ towerId: tower.id }, session)\n    }\n    if (!_session) {\n      await session.commitTransaction();\n      session.endSession();\n    }\n    if (success) {\n      return { success: true, tower, rooms };\n    } else {\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default readById\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\n\nconst readMembers = async (args: { towerId: string, humanId: string }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let result: Array<any>;\n  try {\n    let success = false\n    let myMembership = await Factories.MemberFactory.instance.find({ towerId: args.towerId, humanId: args.humanId }, session)\n    if (myMembership !== null) {\n      let data = await Factories.MemberFactory.instance.findGroup({ towerId: args.towerId }, session);\n      let humans = await Factories.HumanFactory.instance.findGroup({ id: { $in: data.map(m => m.humanId) } })\n      let humansDict = {}\n      humans.forEach(human => { humansDict[human.id] = human })\n      result = data.map(m => ({ ...m, human: humansDict[m.humanId] }))\n      success = true\n    }\n    if (!_session) {\n      await session.commitTransaction();\n      session.endSession();\n    }\n    if (success) {\n      return { success: true, members: result };\n    } else {\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default readMembers\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\nimport { ITower } from 'models/tower.model';\nimport { IRoom } from 'models/room.model';\n\nconst read = async (args: { humanId: string }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let towers: Array<ITower>, rooms: Array<IRoom>;\n  try {\n    let members = await Factories.MemberFactory.instance.findGroup({ humanId: args.humanId }, session)\n    towers = await Factories.TowerFactory.instance.findGroup({ id: { $in: members.map(m => m.towerId) } }, session);\n    rooms = await Factories.RoomFactory.instance.findGroup({ towerId: { $in: towers.map(t => t.id) } }, session)\n    if (!_session) {\n      await session.commitTransaction();\n      session.endSession();\n    }\n    return { success: true, towers, rooms };\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default read\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport { isIdEmpty } from '../../../utils/numbers';\nimport permissions from '../../../permissions.json';\nimport { secureObject, secureAdmins } from '../../../utils/filter';\nimport { makeUniqueId } from '../../../utils/generator';\nimport { IMember } from 'models/member.model';\nimport { IHuman } from 'models/human.model';\nimport { IRoom } from 'models/room.model';\nimport { ITower } from 'models/tower.model';\nimport * as Factories from '../../factories'\n\nconst addMember = async (args: { towerId: string, humanId: string }, _session?: ClientSession) => {\n  if (isIdEmpty(args.towerId)) {\n    console.error('tower id can not be empty');\n    return { success: false };\n  }\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let member: IMember, tower: ITower;\n  try {\n    tower = await Factories.TowerFactory.instance.find({ id: args.towerId }, session);\n    member = await Factories.MemberFactory.instance.create({\n      id: makeUniqueId(),\n      humanId: args.humanId,\n      towerId: args.towerId,\n      secret: {\n        permissions: permissions.DEFAULT_ROOM_ADMIN_PERMISSIONS\n      }\n    }, session);\n    if (!_session) {\n      await session.commitTransaction();\n      session.endSession();\n    }\n    return {\n      success: true,\n      member: member,\n    };\n  } catch (error) {\n    console.error(error);\n    if (!_session) {\n      console.error('abort transaction');\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default addMember\n","\nimport create from \"./create\";\nimport remove from \"./remove\";\nimport search from \"./search\";\nimport readById from \"./readById\";\nimport update from \"./update\";\n\nexport {\n    create,\n    readById,\n    remove,\n    search,\n    update\n}\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport { isEmpty, isNameFieldInvalid } from '../../../utils/strings';\nimport permissions from '../../../permissions.json';\nimport * as Factories from '../../factories'\nimport { makeUniqueId } from '../../../utils/generator';\nimport { IRoom } from 'models/room.model';\nimport { IMember } from 'models/member.model';\n\nconst create = async (args: { towerId: string, title: string, avatarId: string, isPublic: boolean, floor: string, humanId: string, creationCallback?: any }, _session?: ClientSession) => {\n  if (isEmpty(args.title)) {\n    console.error('title can not be empty');\n    return { success: false };\n  }\n  if (isNameFieldInvalid(args.title)) {\n    console.error('title can not be longer than limit');\n    return { success: false };\n  }\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let room: IRoom;\n  try {\n    let success = false;\n    let tower = await Factories.TowerFactory.instance.find({ id: args.towerId }, session);\n    if (tower !== null) {\n      if (tower.secret.adminIds.includes(args.humanId)) {\n        room = await Factories.RoomFactory.instance.create({\n          id: makeUniqueId(),\n          title: args.title,\n          avatarId: isEmpty(args.avatarId) ? 'EMPTY' : args.avatarId,\n          towerId: args.towerId,\n          isPublic: args.isPublic,\n          floor: args.floor,\n          secret: {\n            adminIds: [\n              args.humanId\n            ]\n          }\n        }, session);\n        args.creationCallback && await args.creationCallback(room, session)\n        success = true;\n        if (!_session) await session.commitTransaction();\n      } else {\n        console.error('user is not admin of the tower');\n        console.error('abort transaction');\n        if (!_session) await session.abortTransaction();\n      }\n    } else {\n      console.error('tower does not exist');\n      console.error('abort transaction');\n      if (!_session) await session.abortTransaction();\n    }\n    if (!_session) session.endSession();\n    if (success) {\n      return {\n        success: true, room\n      };\n    } else {\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n};\n\nexport default create\n","\nimport mongoose, { ClientSession } from 'mongoose'\nimport * as Factories from '../../factories'\nimport { IRoom } from 'models/room.model';\n\nconst remove = async (args: { towerId: string, roomId: string, humanId: string }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let room: IRoom\n  try {\n    let success = false;\n    let tower = await Factories.TowerFactory.instance.find({ id: args.towerId }, session);\n    if (tower !== null) {\n      room = await Factories.RoomFactory.instance.find({ id: args.roomId, towerId: args.towerId }, session);\n      if (tower.secret.adminIds.includes(args.humanId) || room.secret.adminIds.includes(args.humanId)) {\n        await Factories.RoomFactory.instance.remove({ id: args.roomId }, session);\n        success = true;\n        if (!_session) await session.commitTransaction();\n      } else {\n        console.error('user is not admin of the tower or room');\n        console.error('abort transaction');\n        if (!_session) await session.abortTransaction();\n      }\n    } else {\n      console.error('tower does not exist');\n      console.error('abort transaction');\n      if (!_session) await session.abortTransaction();\n    }\n    if (!_session) session.endSession();\n    if (success) {\n      return { success: true, room };\n    } else {\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default remove\n","\nimport mongoose, { ClientSession } from 'mongoose'\nimport * as Factories from '../../factories'\nimport { isReadCountEmpty, isReadCountInvalid } from '../../../utils/numbers'\n\nconst search = async (args: { query: string, offset?: number, count?: number, towerId: string, humanId: string }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let data;\n  try {\n    let success = false;\n    let tower = await Factories.TowerFactory.instance.find({ id: args.towerId }, session);\n    if (tower !== null) {\n      if (tower.isPublic !== true) {\n        let member = await Factories.MemberFactory.instance.find({ humanId: args.humanId, towerId: args.towerId }, session)\n        if (member !== null) {\n          if (args.offset && args.count) {\n            data = await Factories.RoomFactory.instance.read(args.offset, args.count, {\n              towerId: args.towerId,\n              $or: [\n                {\n                  title: { '$regex': args.query, '$options': 'i' },\n                },\n                {\n                  description: { '$regex': args.query, '$options': 'i' },\n                }\n              ]\n            })\n          } else {\n            data = await Factories.RoomFactory.instance.read(0, 100, {\n              towerId: args.towerId,\n              $or: [\n                {\n                  title: { '$regex': args.query, '$options': 'i' },\n                },\n                {\n                  description: { '$regex': args.query, '$options': 'i' },\n                }\n              ]\n            })\n          }\n          success = true\n        } else {\n          console.error('access denied');\n          if (!_session) {\n            console.error('abort transaction');\n            await session.abortTransaction();\n          }\n        }\n      } else {\n        if (args.offset && args.count) {\n          data = await Factories.RoomFactory.instance.read(args.offset, args.count, {\n            towerId: args.towerId,\n            $or: [\n              {\n                title: { '$regex': args.query, '$options': 'i' },\n              },\n              {\n                description: { '$regex': args.query, '$options': 'i' },\n              }\n            ]\n          })\n        } else {\n          data = await Factories.RoomFactory.instance.read(0, 100, {\n            towerId: args.towerId,\n            $or: [\n              {\n                title: { '$regex': args.query, '$options': 'i' },\n              },\n              {\n                description: { '$regex': args.query, '$options': 'i' },\n              }\n            ]\n          })\n        }\n        if (!_session) await session.commitTransaction();\n        success = true;\n      }\n    } else {\n      console.error('tower does not exist');\n      if (!_session) {\n        console.error('abort transaction');\n        await session.abortTransaction();\n      }\n    }\n    if (!_session) session.endSession();\n    if (success) {\n      return { success: true, rooms: data, tower };\n    } else {\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(error);\n    if (!_session) {\n      console.error('abort transaction');\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default search\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\nimport { ITower } from 'models/tower.model';\n\nconst readById = async (args: { towerId: string, roomId: string, humanId: string }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let success = false;\n  try {\n    let room = await Factories.RoomFactory.instance.find({ id: args.roomId, towerId: args.towerId }, session);\n    if (room !== null) {\n      if (room.isPublic) {\n        success = true;\n      } else {\n        let member = await Factories.MemberFactory.instance.find({ humanId: args.humanId, roomId: args.roomId }, session);\n        if (member !== null) {\n          success = true;\n        } else {\n          let invite = await Factories.InviteFactory.instance.find({ humanId: args.humanId, roomId: args.roomId }, session);\n          if (invite !== null) {\n            success = true;\n          }\n        }\n      }\n    }\n    let tower: ITower;\n    if (success) {\n      tower = await Factories.TowerFactory.instance.find({ id: room.towerId }, session);\n    }\n    if (!_session) {\n      await session.commitTransaction();\n      session.endSession();\n    }\n    if (success) {\n      return { success: true, tower, room };\n    } else {\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(error);\n    if (!_session) {\n      console.error('abort transaction');\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default readById\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport { isEmpty, isNameFieldInvalid } from '../../../utils/strings';\nimport { IRoom } from 'models/room.model';\nimport * as Factories from '../../factories'\n\nconst update = async (args: { towerId: string, roomId: string, title: string, avatarId: string, isPublic: string, humanId: string }, _session?: ClientSession) => {\n  if (isEmpty(args.title)) {\n    console.error('title can not be empty');\n    return { success: false };\n  }\n  if (isNameFieldInvalid(args.title)) {\n    console.error('title can not be longer than limit');\n    return { success: false };\n  }\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let room: IRoom\n  try {\n    let success = false;\n    let tower = await Factories.TowerFactory.instance.find({ id: args.towerId }, session);\n    if (tower !== null) {\n      room = await Factories.RoomFactory.instance.find({ id: args.roomId, towerId: args.towerId }, session);\n      if (tower.secret.adminIds.includes(args.humanId) || room.secret.adminIds.includes(args.humanId)) {\n        await Factories.RoomFactory.instance.update({ id: args.roomId }, {\n          title: args.title,\n          avatarId: isEmpty(args.avatarId) ? 'EMPTY' : args.avatarId,\n          isPublic: args.isPublic,\n        }, session);\n        room = await Factories.RoomFactory.instance.find({ id: args.roomId, towerId: args.towerId }, session);\n        success = true;\n        if (!_session) await session.commitTransaction();\n      } else {\n        console.error('user is not admin of the tower or room');\n        if (!_session) {\n          console.error('abort transaction');\n          await session.abortTransaction();\n        }\n      }\n    } else {\n      console.error('tower does not exist');\n      if (!_session) {\n        console.error('abort transaction');\n        await session.abortTransaction();\n      }\n    }\n    if (!_session) session.endSession();\n    if (success) {\n      return { success: true, room };\n    } else {\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(error);\n    if (!_session) {\n      console.error('abort transaction');\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n};\n\nexport default update\n","\nimport create from \"./create\";\nimport accept from \"./accept\";\nimport decline from \"./decline\";\nimport cancel from \"./cancel\";\nimport read from \"./read\";\n\nexport {\n    create,\n    accept,\n    decline,\n    cancel,\n    read\n}\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\nimport { makeUniqueId } from '../../../utils/generator';\nimport { isIdEmpty } from '../../../utils/numbers';\nimport { IInvite } from 'models/invite.model';\nimport { ITower } from 'models/tower.model';\n\nconst create = async (args: { towerId: string, targetHumanId: string, senderId: string }, _session?: ClientSession) => {\n  if (isIdEmpty(args.towerId)) {\n    console.error('tower id can not be empty');\n    return { success: false };\n  }\n  if (isIdEmpty(args.targetHumanId)) {\n    console.error('user id can not be empty');\n    return { success: false };\n  }\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let invite: IInvite, tower: ITower;\n  try {\n    let success = false;\n    invite = await Factories.InviteFactory.instance.find({ humanId: args.targetHumanId, towerId: args.towerId }, session);\n    if (invite === null) {\n      tower = await Factories.TowerFactory.instance.find({ id: args.towerId }, session);\n      if (tower.secret.adminIds.includes(args.senderId)) {\n        let user = await Factories.HumanFactory.instance.find({ id: args.targetHumanId }, session);\n        if (user !== null) {\n          invite = await Factories.InviteFactory.instance.create({\n            id: makeUniqueId(),\n            humanId: args.targetHumanId,\n            towerId: args.towerId,\n          }, session);\n          success = true;\n          if (!_session) await session.commitTransaction();\n        } else {\n          console.error('user not found');\n          if (!_session) {\n            console.error('abort transaction');\n            await session.abortTransaction();\n          }\n        }\n      } else {\n        console.error('user is not admin of the tower or room');\n        if (!_session) {\n          console.error('abort transaction');\n          await session.abortTransaction();\n        }\n      }\n    } else {\n      console.error('invite already exists');\n      if (!_session) {\n        console.error('abort transaction');\n        await session.abortTransaction();\n      }\n    }\n    if (!_session) session.endSession();\n    if (success) {\n      return { success: true, invite: { ...invite, tower } }\n    } else {\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(error);\n    if (!_session) {\n      console.error('abort transaction');\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default create\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\nimport { makeUniqueId } from '../../../utils/generator';\nimport { isIdEmpty } from '../../../utils/numbers';\nimport { IMember } from 'models/member.model';\nimport { IRoom } from 'models/room.model';\nimport { ITower } from 'models/tower.model';\nimport permissions from '../../../permissions.json';\n\nconst accept = async (args: { inviteId: string, humanId: string, towerId: string }, _session?: ClientSession) => {\n  if (isIdEmpty(args.inviteId)) {\n    console.error('invite id can not be empty');\n    return { success: false };\n  }\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let member: IMember, room: IRoom, tower: ITower, rooms: Array<IRoom>\n  try {\n    let invite = await Factories.InviteFactory.instance.find({ id: args.inviteId, humanId: args.humanId, towerId: args.towerId }, session);\n    if (invite !== null) {\n      await Promise.all([\n        (async () => { tower = await Factories.TowerFactory.instance.find({ id: invite.towerId }, session); })(),\n        (async () => {\n          member = await Factories.MemberFactory.instance.create({\n            id: makeUniqueId(),\n            humanId: invite.humanId,\n            towerId: invite.towerId,\n            secret: {\n              permissions: permissions.DEFAULT_ROOM_ADMIN_PERMISSIONS\n            }\n          }, session);\n        })(),\n        (async () => { await Factories.InviteFactory.instance.remove({ id: invite.id }, session); })(),\n        (async () => { rooms = await Factories.RoomFactory.instance.findGroup({ towerId: invite.towerId }, session); })()\n      ])\n      if (!_session) {\n        await session.commitTransaction();\n        session.endSession();\n      }\n      return {\n        success: true,\n        member: member,\n        rooms: rooms,\n        tower,\n        room,\n      }\n    } else {\n      console.error('invite not found');\n      if (!_session) {\n        console.error('abort transaction');\n        await session.abortTransaction();\n        session.endSession();\n      }\n      return { success: false }\n    }\n  } catch (error) {\n    console.error(error);\n    if (!_session) {\n      console.error('abort transaction');\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false }\n  }\n}\n\nexport default accept\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\nimport { isIdEmpty } from '../../../utils/numbers';\nimport { ITower } from 'models/tower.model';\n\nconst decline = async (args: { inviteId: string, humanId: string, towerId: string }, _session?: ClientSession) => {\n  if (isIdEmpty(args.inviteId)) {\n    console.error('invite id can not be empty');\n    return { success: false };\n  }\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let tower: ITower\n  try {\n    let success = false;\n    let invite = await Factories.InviteFactory.instance.find({ id: args.inviteId, humanId: args.humanId, towerId: args.towerId }, session);\n    if (invite !== null) {\n      tower = await Factories.TowerFactory.instance.find({ id: invite.towerId }, session)\n      await Factories.InviteFactory.instance.remove({ id: invite.id }, session);\n      success = true;\n      if (!_session) await session.commitTransaction();\n    } else {\n      console.error('invite not found');\n      if (!_session) {\n        console.error('abort transaction');\n        await session.abortTransaction();\n      }\n    }\n    if (!_session) session.endSession();\n    if (success) {\n      return { success: true, adminIds: tower.secret.adminIds };\n    } else {\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(error);\n    if (!_session) {\n      console.error('abort transaction');\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default decline\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\nimport { isIdEmpty } from '../../../utils/numbers';\n\nconst cancel = async (args: { inviteId: string, humanId: string, towerId: string }, _session?: ClientSession) => {\n  if (isIdEmpty(args.inviteId)) {\n    console.error('invite id can not be empty');\n    return { success: false };\n  }\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let targetHumanId: string;\n  try {\n    let success = false;\n    let invite = await Factories.InviteFactory.instance.find({ id: args.inviteId, towerId: args.towerId }, session);\n    if (invite !== null) {\n      targetHumanId = invite.humanId\n      let tower = await Factories.TowerFactory.instance.find({ id: invite.towerId }, session);\n      if (tower.secret.adminIds.includes(args.humanId)) {\n        await Factories.InviteFactory.instance.remove({ id: invite.id }, session);\n        success = true;\n        if (!_session) await session.commitTransaction();\n      } else {\n        console.error('access denied');\n        if (!_session) {\n          console.error('abort transaction');\n          await session.abortTransaction();\n        }\n      }\n    } else {\n      console.error('invite not found');\n      if (!_session) {\n        console.error('abort transaction');\n        await session.abortTransaction();\n      }\n    }\n    if (!_session) session.endSession();\n    if (success) {\n      if (targetHumanId) {\n        return { success: true, targetHumanId }\n      } else {\n        return { success: true }\n      }\n    } else {\n      return { success: false }\n    }\n  } catch (error) {\n    console.error(error);\n    if (!_session) {\n      console.error('abort transaction');\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default cancel\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\nimport { ITower } from 'models/tower.model';\n\nconst read = async (args: { humanId: string }, _session?: ClientSession) => {\n  try {\n    let invites = await Factories.InviteFactory.instance.read({ humanId: args.humanId })\n    let towers = await Factories.TowerFactory.instance.findGroup({ id: { $in: invites.map(i => i.towerId) } })\n    let towersDict = {}\n    towers.forEach((tower: ITower) => {\n      towersDict[tower.id] = tower\n    });\n    let finalResult = invites.map(invite => ({ ...invite, tower: towersDict[invite.towerId] }))\n    return { success: true, invites: finalResult }\n  } catch (error) {\n    console.error(error);\n    return { success: false };\n  }\n}\n\nexport default read\n","\nimport update from \"./update\";\nimport read from \"./read\";\n\nexport {\n    update,\n    read\n}\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\nimport { IMember } from 'models/member.model';\n\nconst update = async (args: { towerId: string, permissions: { [id: string]: boolean }, targetHumanId: string, humanId: string }, _session?: ClientSession) => {\n  if (args.permissions === undefined) {\n    console.error('permissions can not be empty');\n    return { success: false };\n  }\n  if (args.targetHumanId === args.humanId) {\n    console.error('access denied');\n    return { success: false };\n  }\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let member: IMember;\n  try {\n    let success = false;\n    let tower = await Factories.TowerFactory.instance.find({ id: args.towerId }, session);\n    if (tower !== null) {\n      if ((tower.secret.ownerId === args.humanId) || (tower.secret.adminIds.includes(args.humanId) && !tower.secret.adminIds.includes(args.targetHumanId))) {\n        let member = await Factories.MemberFactory.instance.update({ humanId: args.targetHumanId, towerId: args.towerId }, {\n          secret: {\n            permissions: args.permissions\n          }\n        }, session);\n        if (member !== null) {\n          if (!_session) await session.commitTransaction();\n          success = true;\n        } else {\n          console.error('access denied');\n          if (!_session) {\n            console.error('abort transaction');\n            await session.abortTransaction();\n          }\n        }\n      } else {\n        console.error('access denied');\n        if (!_session) {\n          console.error('abort transaction');\n          await session.abortTransaction();\n        }\n      }\n    } else {\n      console.error('tower does not exist');\n      if (!_session) {\n        console.error('abort transaction');\n        await session.abortTransaction();\n      }\n    }\n    if (!_session) session.endSession();\n    return { success }\n  } catch (error) {\n    console.error(error);\n    if (!_session) {\n      console.error('abort transaction');\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default update\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\n\nconst read = async (args: { towerId: string, targetHumanId: string, humanId: string }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  try {\n    let success = false\n    let permissions: { [id: string]: boolean } = {}\n    let tower = await Factories.TowerFactory.instance.find({ id: args.towerId }, session);\n    if (tower !== null) {\n      if ((tower.secret.ownerId === args.humanId) || (tower.secret.adminIds.includes(args.humanId) && !tower.secret.adminIds.includes(args.targetHumanId))) {\n        let member = await Factories.MemberFactory.instance.find({ humanId: args.targetHumanId, towerId: args.towerId }, session);\n        if (member !== null) {\n          permissions = member.secret?.permissions ? member.secret.permissions : {};\n          if (!_session) await session.commitTransaction();\n          success = true;\n        } else {\n          console.error('access denied');\n          if (!_session) {\n            console.error('abort transaction');\n            await session.abortTransaction();\n          }\n        }\n      } else {\n        console.error('access denied');\n        if (!_session) {\n          console.error('abort transaction');\n          await session.abortTransaction();\n        }\n      }\n    } else {\n      console.error('tower does not exist');\n      if (!_session) {\n        console.error('abort transaction');\n        await session.abortTransaction();\n      }\n    }\n    if (!_session) session.endSession();\n    return { success: success };\n  } catch (error) {\n    console.error(error);\n    if (!_session) {\n      console.error('abort transaction');\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default read\n","\nimport create from \"./create\";\nimport update from \"./update\";\nimport remove from \"./remove\";\nimport search from \"./search\";\nimport read from \"./read\";\nimport signIn from \"./signIn\";\n\nexport {\n    create,\n    update,\n    remove,\n    search,\n    read,\n    signIn\n}\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport { isEmpty, isNameFieldInvalid } from '../../../utils/strings';\nimport permissions from '../../../permissions.json';\nimport * as Factories from '../../factories'\nimport { makeUniqueId } from '../../../utils/generator';\nimport { ITower } from 'models/tower.model';\nimport { IRoom } from 'models/room.model';\nimport { IMember } from 'models/member.model';\nimport { IMachine } from 'models/machine.model';\n\nconst create = async (args: { name: string, creatorId: string }, _session?: ClientSession) => {\n  if (isEmpty(args.name)) {\n    console.error('title can not be empty');\n    return { success: false };\n  }\n  if (isNameFieldInvalid(args.name)) {\n    console.error('title can not be longer than limit');\n    return { success: false };\n  }\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let machine: IMachine;\n  try {\n    machine = await Factories.MachineFactory.instance.create({\n      id: makeUniqueId(),\n      name: args.name,\n      secret: {\n        token: makeUniqueId(),\n        creatorId: args.creatorId\n      }\n    }, session);\n    if (!_session) {\n      await session.commitTransaction();\n      session.endSession();\n    }\n    return { success: true, machine }\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default create\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport { isEmpty, isNameFieldInvalid } from '../../../utils/strings';\nimport * as Factories from '../../factories'\n\nconst update = async (args: { machineId: string, name: string, humanId: string }, _session?: ClientSession) => {\n  if (isEmpty(args.name)) {\n    console.error('title can not be empty');\n    return { success: false };\n  }\n  if (isNameFieldInvalid(args.name)) {\n    console.error('title can not be longer than limit');\n    return { success: false };\n  }\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  try {\n    let success = false;\n    let machine = await Factories.MachineFactory.instance.find({ id: args.machineId }, session);\n    if (machine !== null) {\n      if (machine.secret.creatorId === args.humanId) {\n        machine = await Factories.MachineFactory.instance.update({ id: machine.id }, {\n          name: args.name,\n        }, session);\n        success = true;\n        if (!_session) await session.commitTransaction();\n      } else {\n        console.error('user is not admin of the tower');\n        console.error('abort transaction');\n        if (!_session) await session.abortTransaction();\n      }\n    } else {\n      console.error('tower does not exist');\n      console.error('abort transaction');\n      if (!_session) await session.abortTransaction();\n    }\n    if (!_session) session.endSession();\n    if (success) {\n      return { success: true, machine };\n    } else {\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n};\n\nexport default update\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories';\nimport * as Schemas from '../../schema';\n\nconst remove = async (args: { machineId: string, humanId: string }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  try {\n    let memberIds: Array<string>\n    let success = false;\n    let machine = await Factories.MachineFactory.instance.find({ id: args.machineId }, session);\n    if (machine !== null) {\n      if (machine.secret.creatorId === args.humanId) {\n        await Factories.MachineFactory.instance.remove({ id: machine.id }, session);\n        success = true;\n        if (!_session) await session.commitTransaction();\n      } else {\n        console.error('user is not admin of the tower');\n        console.error('abort transaction');\n        if (!_session) await session.abortTransaction();\n      }\n    } else {\n      console.error('tower does not exist');\n      console.error('abort transaction');\n      if (!_session) await session.abortTransaction();\n    }\n    if (!_session) session.endSession();\n    if (success) {\n      return { success: true, machine };\n    } else {\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n};\n\nexport default remove\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\nimport { IMachine } from 'models/machine.model';\n\nconst search = async (args: { query: string, offset?: number, count?: number }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let data: Array<IMachine>;\n  try {\n    if (args.offset === undefined && args.count === undefined) {\n      data = await Factories.MachineFactory.instance.read(0, 100, {\n        name: { '$regex': args.query, '$options': 'i' }\n      });\n    } else {\n      data = await Factories.MachineFactory.instance.read(args.offset, args.count, {\n        name: { '$regex': args.query, '$options': 'i' },\n      });\n    }\n    if (!_session) {\n      await session.commitTransaction();\n      session.endSession();\n    }\n    return { success: true, machines: data };\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default search\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\nimport { IMachine } from '../../../models/machine.model';\n\nconst read = async (args: { offset?: number, count?: number }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let data: Array<IMachine>;\n  try {\n    if (args.offset === undefined && args.count === undefined) {\n      data = await Factories.MachineFactory.instance.read(0, 100);\n    } else {\n      data = await Factories.MachineFactory.instance.read(args.offset, args.count);\n    }\n    if (!_session) {\n      await session.commitTransaction();\n      session.endSession();\n    }\n    return { success: true, machines: data };\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default read\n","\nimport { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\n\nconst signIn = async (args: { machineId: string }, _session?: ClientSession) => {\n  let workerships = await Factories.WorkerFactory.instance.read({ machineId: args.machineId })\n  let rooms = await Factories.RoomFactory.instance.findGroup({ id: { $in: workerships.map(w => w.roomId) } })\n  let towerIds = (await Factories.TowerFactory.instance.findGroup({ id: { $in: rooms.map(r => r.towerId) } })).map(t => t.id)\n  return { success: true, towerIds };\n}\n\nexport default signIn\n","\nimport create from \"./create\";\nimport remove from \"./remove\";\nimport read from \"./read\";\nimport update from \"./update\";\n\nexport {\n    create,\n    remove,\n    read,\n    update\n}\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport { isEmpty, isNameFieldInvalid } from '../../../utils/strings';\nimport permissions from '../../../permissions.json';\nimport * as Factories from '../../factories'\nimport { makeUniqueId } from '../../../utils/generator';\nimport { IMachine } from 'models/machine.model';\nimport { IWorker } from 'models/worker.model';\n\nconst create = async (args: { humanId: string, machineId: string, roomId: string, towerId: string, secret: any }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let worker: IWorker;\n  try {\n    console.log('hello')\n    let member = await Factories.MemberFactory.instance.find({ towerId: args.towerId, humanId: args.humanId }, session)\n    console.log('member', member)\n    if (member !== null) {\n      let room = await Factories.RoomFactory.instance.find({ id: args.roomId, towerId: member.towerId }, session)\n      console.log('room', room)\n      if (room !== null) {\n        worker = await Factories.WorkerFactory.instance.create({\n          id: makeUniqueId(),\n          machineId: args.machineId,\n          roomId: args.roomId,\n          secret: args.secret\n        }, session);\n        if (!_session) {\n          await session.commitTransaction();\n          session.endSession();\n        }\n        return { success: true, worker }\n      } else {\n        if (!_session) {\n          await session.abortTransaction();\n          session.endSession();\n        }\n        return { success: false }\n      }\n    } else {\n      if (!_session) {\n        await session.abortTransaction();\n        session.endSession();\n      }\n      return { success: false }\n    }\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default create\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\nimport { IWorker } from 'models/worker.model';\n\nconst remove = async (args: { humanId: string, workerId: string, roomId: string, towerId: string }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  try {\n    let member = await Factories.MemberFactory.instance.find({ towerId: args.towerId, humanId: args.humanId }, session)\n    if (member !== null) {\n      let room = await Factories.RoomFactory.instance.find({ id: args.roomId, towerId: member.towerId }, session)\n      if (room !== null) {\n        let worker = await Factories.WorkerFactory.instance.find({ id: args.workerId }, session);\n        if (worker !== null) {\n          await Factories.WorkerFactory.instance.remove({ id: args.workerId }, session);\n          let otherWorkersOfSameMachine = await Factories.WorkerFactory.instance.read({ machineId: worker.machineId, roomId: worker.roomId })\n          if (!_session) {\n            await session.commitTransaction();\n            session.endSession();\n          }\n          return { success: true, worker, wasTheLast: otherWorkersOfSameMachine.length === 0 }\n        } else {\n          if (!_session) {\n            await session.abortTransaction();\n            session.endSession();\n          }\n          return { success: false }\n        }\n      } else {\n        if (!_session) {\n          await session.abortTransaction();\n          session.endSession();\n        }\n        return { success: false }\n      }\n    } else {\n      if (!_session) {\n        await session.abortTransaction();\n        session.endSession();\n      }\n      return { success: false }\n    }\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default remove\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\nimport { IWorker } from 'models/worker.model';\n\nconst read = async (args: { towerId: string, roomId: string, humanId?: string }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  let data: Array<IWorker>, success = false\n  try {\n    let tower = await Factories.TowerFactory.instance.find({ id: args.towerId }, session)\n    if (tower !== null) {\n      let room = await Factories.RoomFactory.instance.find({ id: args.roomId, towerId: tower.id }, session)\n      if (room !== null) {\n        if (tower.isPublic) {\n          data = await Factories.WorkerFactory.instance.read({ roomId: room.id })\n          success = true\n        } else {\n          let member = await Factories.MemberFactory.instance.find({ towerId: tower.id, humanId: args.humanId }, session)\n          if (member !== null) {\n            data = await Factories.WorkerFactory.instance.read({ roomId: room.id })\n            success = true\n          }\n        }\n      }\n    }\n    if (!_session) {\n      await session.commitTransaction();\n      session.endSession();\n    }\n    return { success: true, workers: data };\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default read\n","\nimport mongoose, { ClientSession } from 'mongoose';\nimport * as Factories from '../../factories'\nimport { IWorker } from 'models/worker.model';\nimport flat from 'flat'\nimport { Worker } from 'database/schema/worker.schema';\n\nconst update = async (args: { humanId: string, roomId: string, towerId: string, worker: IWorker }, _session?: ClientSession) => {\n  const session = _session ? _session : await mongoose.startSession();\n  if (!_session) session.startTransaction();\n  try {\n    let member = await Factories.MemberFactory.instance.find({ towerId: args.towerId, humanId: args.humanId }, session)\n    if (member !== null) {\n      let room = await Factories.RoomFactory.instance.find({ id: args.roomId, towerId: member.towerId }, session)\n      if (room !== null) {\n        let worker = await Factories.WorkerFactory.instance.find({ id: args.worker.id }, session)\n        if (worker !== null) {\n          worker = await Factories.WorkerFactory.instance.update({ id: args.worker.id }, args.worker, session);\n          if (!_session) {\n            await session.commitTransaction();\n            session.endSession();\n          }\n          return { success: true, worker }\n        } else {\n          if (!_session) {\n            await session.abortTransaction();\n            session.endSession();\n          }\n          return { success: false }\n        }\n      } else {\n        if (!_session) {\n          await session.abortTransaction();\n          session.endSession();\n        }\n        return { success: false }\n      }\n    } else {\n      if (!_session) {\n        await session.abortTransaction();\n        session.endSession();\n      }\n      return { success: false }\n    }\n  } catch (error) {\n    console.error(error);\n    console.error('abort transaction');\n    if (!_session) {\n      await session.abortTransaction();\n      session.endSession();\n    }\n    return { success: false };\n  }\n}\n\nexport default update\n","\nfunction secureObject(obj: any, forbiddenKey: string) {\n    let newObj = {...obj};\n    delete newObj[forbiddenKey]\n    return newObj;\n}\n\nconst secureAdmins = function (obj: any, safeUserId: string) {\n    obj.secret.adminIds = obj.secret.adminIds.filter((adminId: string) => (adminId === safeUserId));\n    return obj;\n}\n\nexport {\n    secureAdmins,\n    secureObject\n}","import MemoryDriver from \"../drivers/memory/memory\"\n\nconst authenticate = async (token: string) => {\n    let humanId = await MemoryDriver.instance.fetch(`auth:${token}`)\n    if (humanId) {\n        return { granted: true, humanId }\n    } else {\n        return { granted: false }\n    }\n}\n\nexport default authenticate\n","\nimport MemoryDriver from \"../drivers/memory/memory\"\nimport Client from \"../drivers/network/client\"\n\nconst authorize = async (client: Client, towerId: string, roomId?: string) => {\n    if (client.towerId === towerId) {\n        if (roomId) {\n            if (await MemoryDriver.instance.fetch(`struct:${towerId}:${roomId}`)) {\n                return { granted: true, rights: client.rights, roomId }\n            } else {\n                return { granted: false }\n            }\n        } else {\n            return { granted: true, rights: client.rights }\n        }\n    }\n    if (client.humanId) {\n        let rights = await MemoryDriver.instance.fetch(`rights:${towerId}:${client.humanId}`)\n        if (rights) {\n            client.towerId = towerId\n            if (roomId) {\n                if (await MemoryDriver.instance.fetch(`struct:${towerId}:${roomId}`)) {\n                    return { granted: true, rights, roomId }\n                } else {\n                    return { granted: false }\n                }\n            } else {\n                return { granted: true, rights }\n            }\n        } else {\n            return { granted: false }\n        }\n    } else {\n        return { granted: false }\n    }\n}\n\nexport default authorize\n","\nimport MemoryDriver from \"../../drivers/memory/memory\"\n\nconst addRule = (towerId: string, humanId: string, permissions: { [id: string]: boolean }) => {\n    MemoryDriver.instance.save(\n        `rights:${towerId}:${humanId}`, permissions\n    )\n}\n\nexport default addRule\n","\nimport MemoryDriver from \"../../drivers/memory/memory\"\n\nconst isRule = async (towerId: string, humanId: string) => {\n    return (await MemoryDriver.instance.fetch(\n        `rights:${towerId}:${humanId}`\n    )) !== undefined\n}\n\nexport default isRule\n","\nimport MemoryDriver from \"../../drivers/memory/memory\"\n\nconst removeRule = (towerId: string, humanId: string) => {\n    MemoryDriver.instance.remove(\n        `rights:${towerId}:${humanId}`\n    )\n}\n\nexport default removeRule\n","\nimport MemoryDriver from \"../../drivers/memory/memory\"\n\nconst removeRules = (towerId: string, humanIds: Array<string>) => {\n    let keys = humanIds.map(i => `rights:${towerId}:${i}`)\n    MemoryDriver.instance.remove(keys)\n}\n\nexport default removeRules\n","\nimport addRule from \"./addRule\";\nimport isRule from \"./isRule\";\nimport removeRule from \"./removeRule\";\nimport removeRules from \"./removeRules\";\n\nexport default {\n    addRule,\n    isRule,\n    removeRule,\n    removeRules\n}\n","\nimport authenticate from \"./authenticate\";\nimport authorize from \"./authorize\";\nimport rules from \"./rules\";\n\nexport default class Guardian {\n    static _instance: Guardian\n    public static get instance() {\n        return Guardian._instance\n    }\n    public static initialize() {\n        return new Guardian()\n    }\n    authenticate = authenticate\n    authorize=  authorize\n    rules = rules\n    constructor() {\n        Guardian._instance = this\n    }\n}\n","\nexport const EntityTypes = {\n    ROOM_CREATION: \"room_creation\"\n}\n\nexport default class Extendables {\n    store: { [id: string]: any }\n    callbacks = {\n        creations: {\n            rooms: {\n                inject(callback: any) {\n                    this.callbacks[EntityTypes.ROOM_CREATION] = callback\n                }                    \n            }\n        }\n    }\n}\n","import Client from \"../drivers/network/client\";\nimport * as transactions from '../database/transactions/transactions'\nimport MemoryDriver from \"../drivers/memory/memory\";\nimport { secureObject } from \"../utils/filter\";\nimport NetworkDriver from \"../drivers/network/network\";\nimport guardian from \"../guardian\";\nimport Extendables, { EntityTypes } from \"../extendables\";\n\nclass HumanService {\n    extendables: Extendables\n    constructor(meta: { extendables: Extendables }) {\n        this.extendables = meta.extendables\n    }\n    async signUp(client: Client, body: { email: string }, requestId: string) {\n        return transactions.human.signUp(body)\n    }\n    async signIn(client: Client, body: { token: string }, requestId: string) {\n        let { humanId, granted } = await guardian.authenticate(body.token)\n        if (granted) {\n            let result = await transactions.human.signIn({ humanId })\n            client.updateHumanId(humanId)\n            client.updateToken(body.token)\n            NetworkDriver.instance.keepClient(body.token, client)\n            client.joinTowers(result.memberships.map(m => m.towerId))\n            NetworkDriver.instance.lastSeens[humanId] = -1\n            return { success: true }\n        } else {\n            return { success: false }\n        }\n    }\n    async verify(client: Client, body: { cCode?: string, vCode?: string, accessToken?: string }, requestId: string) {\n        let result = await transactions.human.verify(body)\n        if (result.success && result.human) {\n            result.towers = result.towers.map(tower => tower.secret.ownerId === result.human.id ? tower : secureObject(tower, 'secret'))\n            await MemoryDriver.instance.save(`auth:${result.session.token}`, result.human.id);\n        }\n        return result\n    }\n    async complete(client: Client, body: { cCode: string, firstName: string, lastName?: string }, requestId: string) {\n        let result = await transactions.human.complete({ ...body, creationCallback: this.extendables.store[EntityTypes.ROOM_CREATION] })\n        if (result.success) {\n            await Promise.all([\n                MemoryDriver.instance.save(`auth:${result.session.token}`, result.human.id),\n                MemoryDriver.instance.save(`struct:${result.tower.id}:${result.room.id}`, true),\n                guardian.rules.addRule(result.member.towerId, result.member.humanId, result.member.secret.permissions)\n            ])\n        }\n        return result\n    }\n    async update(client: Client, body: { firstName?: string, lastName?: string }, requestId: string) {\n        if (client.humanId) {\n            return transactions.human.update({ ...body, humanId: client.humanId })\n        } else {\n            return { success: false }\n        }\n    }\n    async readById(client: Client, body: { targetHumanId: string }, requestId: string) {\n        let result = await transactions.human.readById(body)\n        if (result.success && result.human) {\n            result.human = { ...secureObject(result.human, 'secret'), lastseen: result.human.secret.lastSeen }\n        }\n        return result\n    }\n    async readGroupById(client: Client, body: { targetHumanIds: Array<string> }, requestId: string) {\n        let result = await transactions.human.readGroupById(body)\n        if (result.success && result.humans) {\n            result.humans = result.humans.map(human => ({ ...secureObject(human, 'secret'), lastseen: human.secret.lastSeen }))\n        }\n        return result\n    }\n    async search(client: Client, body: { query: string, offset?: number, count?: number }, requestId: string) {\n        let result = await transactions.human.search(body)\n        if (result.success && result.humans)\n            result.humans = result.humans.map(u => secureObject(u, 'secret'))\n        return result\n    }\n    async signOut(client: Client, requestId: string) {\n        if (client.humanId) {\n            let result = await transactions.human.signOut({ humanId: client.humanId })\n            NetworkDriver.instance.looseClient(client)\n            client.leaveTowers(result.memberships.map(m => m.towerId))\n            client.reset()\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async lastSeens(client: Client, body: { humanIds: Array<string> }, requestId: string) {\n        let lastSeensData = {}\n        body.humanIds.forEach(humanId => {\n            lastSeensData[humanId] = NetworkDriver.instance.lastSeens[humanId]\n        })\n        return { success: true, lastSeens: lastSeensData }\n    }\n}\n\nexport default HumanService\n","\nimport Client from \"../drivers/network/client\";\nimport HumanService from \"../services/human.service\";\nimport BaseController from \"./base.controller\";\n\nclass HumanController extends BaseController {\n    service: HumanService\n    constructor(service: HumanService) {\n        super()\n        this.service = service\n    }\n    getName(): string { return 'human' }\n    async signUp(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.signUp(client, body, requestId)\n        response(result)\n    }\n    async signIn(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.signIn(client, body, requestId)\n        response(result)\n    }\n    async verify(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.verify(client, body, requestId)\n        response(result)\n    }\n    async complete(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.complete(client, body, requestId)\n        response(result)\n    }\n    async update(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.update(client, body, requestId)\n        response(result)\n    }\n    async readById(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.readById(client, body, requestId)\n        response(result)\n    }\n    async search(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.search(client, body, requestId)\n        response(result)\n    }\n    async signOut(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.signOut(client, requestId)\n        response(result)\n    }\n}\n\nexport default HumanController\n","\nimport TowerService from \"../services/tower.service\";\nimport Client from \"../drivers/network/client\";\nimport BaseController from \"./base.controller\";\n\nclass TowerController extends BaseController {\n    service: TowerService\n    constructor(service: TowerService) {\n        super()\n        this.service = service\n    }\n    getName() { return 'tower' }\n    async create(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.create(client, body, requestId)\n        response(result)\n    }\n    async update(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.update(client, body, requestId)\n        response(result)\n    }\n    async remove(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.remove(client, body, requestId)\n        response(result)\n    }\n    async search(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.search(client, body, requestId)\n        response(result)\n    }\n    async join(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.join(client, body, requestId)\n        response(result)\n    }\n    async readById(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.readById(client, body, requestId)\n        response(result)\n    }\n    async readMembers(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.readMembers(client, body, requestId)\n        response(result)\n    }\n    async read(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.read(client, body, requestId)\n        response(result)\n    }\n}\n\nexport default TowerController\n","\nimport onUpdate from './onUpdate'\nimport onRemove from './onRemove'\nimport onHumanJoin from './onHumanJoin'\n\nexport {\n    onUpdate,\n    onRemove,\n    onHumanJoin\n}\n","\nclass Update {\n    requestId: string\n    type: string\n    constructor(requestId: string) {\n        this.requestId = requestId\n        this.type = ''\n    }\n}\n\nexport default Update\n","import { ITower } from \"models/tower.model\";\nimport Update from \"../base\";\n\nclass OnTowerUpdate extends Update {\n    tower: ITower\n    constructor(requestId: string, tower: ITower) {\n        super(requestId)\n        this.tower = tower\n    }\n}\n\nexport default OnTowerUpdate\n","import { ITower } from \"../../models/tower.model\";\nimport Update from \"../base\";\n\nclass OnTowerRemove extends Update {\n    tower: ITower\n    constructor(requestId: string, tower: ITower) {\n        super(requestId)\n        this.tower = tower\n    }\n}\n\nexport default OnTowerRemove\n","import { IMember } from \"models/member.model\";\nimport Update from \"../base\";\n\nclass onHumanJoin extends Update {\n    member: IMember\n    constructor(requestId: string, member: IMember) {\n        super(requestId)\n        this.member = member\n    }\n}\n\nexport default onHumanJoin\n","\nimport onUpdate from './onUpdate'\nimport onRemove from './onRemove'\nimport onCreate from './onCreate'\n\nexport {\n    onCreate,\n    onUpdate,\n    onRemove\n}\n","import Update from \"../base\";\nimport { IRoom } from \"models/room.model\";\n\nclass OnRoomUpdate extends Update {\n    room: IRoom\n    constructor(requestId: string, room: IRoom) {\n        super(requestId)\n        this.room = room\n    }\n}\n\nexport default OnRoomUpdate\n","\nimport { IRoom } from \"models/room.model\";\nimport Update from \"../base\";\n\nclass OnRoomRemove extends Update {\n    room: IRoom\n    constructor(requestId: string, room: IRoom) {\n        super(requestId)\n        this.room = room\n    }\n}\n\nexport default OnRoomRemove\n","import { IMember } from \"models/member.model\";\nimport Update from \"../base\";\nimport { IRoom } from \"models/room.model\";\n\nclass onRoomCreate extends Update {\n    room: IRoom\n    constructor(requestId: string, room: IRoom) {\n        super(requestId)\n        this.room = room\n    }\n}\n\nexport default onRoomCreate\n","\nimport onUpdate from './onUpdate'\n\nexport {\n    onUpdate\n}\n","import Update from \"../base\";\n\nclass OnPermissionUpdate extends Update {\n    permissions: { [id: string]: boolean }\n    constructor(requestId: string, permissions: { [id: string]: boolean }) {\n        super(requestId)\n        this.permissions = permissions\n    }\n}\n\nexport default OnPermissionUpdate\n","\nimport onAccept from './onAccept'\nimport onCancel from './onCancel'\nimport onCreate from './onCreate'\nimport onDecline from './onDecline'\n\nexport {\n    onCreate,\n    onCancel,\n    onAccept,\n    onDecline\n}\n","import Update from \"../base\";\n\nclass OnInviteAccept extends Update {\n    inviteId: string\n    constructor(requestId: string, inviteId: string) {\n        super(requestId)\n        this.inviteId = inviteId\n    }\n}\n\nexport default OnInviteAccept\n","import Update from \"../base\";\n\nclass OnInviteCancel extends Update {\n    inviteId: string\n    constructor(requestId: string, inviteId: string) {\n        super(requestId)\n        this.inviteId = inviteId\n    }\n}\n\nexport default OnInviteCancel\n","import { IInvite } from \"models/invite.model\";\nimport Update from \"../base\";\n\nclass onInviteCreate extends Update {\n    invite: IInvite\n    constructor(requestId: string, invite: IInvite) {\n        super(requestId)\n        this.invite = invite\n    }\n}\n\nexport default onInviteCreate\n","import Update from \"../base\";\n\nclass OnInviteDecline extends Update {\n    inviteId: string\n    constructor(requestId: string, inviteId: string) {\n        super(requestId)\n        this.inviteId = inviteId\n    }\n}\n\nexport default OnInviteDecline\n","\nimport onRequest from './onRequest'\nimport onResponse from './onResponse'\n\nexport {\n    onRequest,\n    onResponse\n}\n","import Update from \"../base\";\n\nclass onWorkerRequest extends Update {\n    packet: any\n    constructor(requestId: string, packet: any) {\n        super(requestId)\n        this.packet = packet\n    }\n}\n\nexport default onWorkerRequest\n","import Update from \"../base\";\n\nclass onWorkerResponse extends Update {\n    packet: any\n    constructor(requestId: string, packet: any) {\n        super(requestId)\n        this.packet = packet\n    }\n}\n\nexport default onWorkerResponse\n","\nimport * as tower from './tower'\nimport * as room from './room'\nimport * as permission from './permission'\nimport * as invite from './invite'\nimport * as worker from './worker'\nimport Update from './base'\nimport NetworkDriver from '../drivers/network/network'\n\nlet updatesDict = {\n    tower,\n    room,\n    permission,\n    invite,\n    worker\n}\n\nlet buildUpdate = (requestId: string, path: { category: string, key: string }, ...args: Array<any>) => {\n    let T = updatesDict[path.category][path.key]\n    let updateObject = new T(requestId, ...args)\n    updateObject.type = `${path.category}/${path.key}`\n    return updateObject\n}\n\nlet types = {\n    tower: {\n        onUpdate: { category: 'tower', key: 'onUpdate' },\n        onRemove: { category: 'tower', key: 'onRemove' },\n        onHumanJoin: { category: 'tower', key: 'onHumanJoin' }\n    },\n    room: {\n        onCreate: { category: 'room', key: 'onCreate' },\n        onUpdate: { category: 'room', key: 'onUpdate' },\n        onRemove: { category: 'room', key: 'onRemove' },\n    },\n    permission: {\n        onUpdate: { category: 'permission', key: 'onUpdate' },\n    },\n    invite: {\n        onCreate: { category: 'invite', key: 'onCreate' },\n        onCancel: { category: 'invite', key: 'onCancel' },\n        onAccept: { category: 'invite', key: 'onAccept' },\n        onDecline: { category: 'invite', key: 'onDecline' }\n    },\n    worker: {\n        onRequest: { category: 'worker', key: 'onRequest' },\n        onResponse: { category: 'worker', key: 'onResponse' },\n        onPush: { category: 'worker', key: 'onPush' }\n    },\n}\n\nconst registerUpdateType = <T extends Update>(type: T, path: { category: string, key: string}) => {\n    if (!types[path.category]) {\n        types[path.category] = {}\n        updatesDict[path.category] = {}\n    }\n    types[path.category][path.key] = path\n    updatesDict[path.category][path.key] = type\n}\n\nconst group = (towerId: string) => {\n    return NetworkDriver.instance.group(towerId)\n}\n\nexport default class Updater {\n    static _instance: Updater\n    public static get instance() {\n        return Updater._instance\n    }\n    public static initialize() {\n        return new Updater()\n    }\n    types = types\n    buildUpdate = buildUpdate\n    registerUpdateType = registerUpdateType\n    group = group\n    constructor() {\n        Updater._instance = this\n    }\n}\n","import Client from \"../drivers/network/client\";\nimport * as transactions from '../database/transactions/transactions'\nimport { secureObject } from \"../utils/filter\";\nimport { ITower } from \"../models/tower.model\";\nimport NetworkDriver from \"../drivers/network/network\";\nimport MemoryDriver from \"drivers/memory/memory\";\nimport Extendables, { EntityTypes } from \"../extendables\";\nimport Guardian from \"../guardian\";\nimport Updater from \"updater\";\n\nclass TowerService {\n    extendables: Extendables\n    constructor(meta: { extendables: Extendables }) {\n        this.extendables = meta.extendables\n    }\n    async create(client: Client, body: { title: string, avatarId: string, isPublic: boolean }, requestId: string) {\n        if (client.humanId) {\n            let result = await transactions.tower.create({ ...body, ownerId: client.humanId, creationCallback: this.extendables.store[EntityTypes.ROOM_CREATION] })\n            if (result.success) {\n                Guardian.instance.rules.addRule(result.member.towerId, result.member.humanId, result.member.secret.permissions)\n                client.updateTowerId(result.tower.id, result.member.secret.permissions)\n                client.joinTower(result.tower.id)\n                await MemoryDriver.instance.save(`struct:${result.tower.id}:${result.room.id}`, true)\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async update(client: Client, body: { towerId: string, title: string, avatarId: string, isPublic: boolean }, requestId: string) {\n        let { granted } = await Guardian.instance.authorize(client, body.towerId)\n        if (granted) {\n            let result = await transactions.tower.update({ ...body, humanId: client.humanId })\n            if (result.success) {\n                NetworkDriver.instance.group(body.towerId).boradcast.emit(client, Updater.instance.buildUpdate(requestId, Updater.instance.types.tower.onUpdate, secureObject(result.tower, 'secret')))\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async remove(client: Client, body: { towerId: string }, requestId: string) {\n        let { granted } = await Guardian.instance.authorize(client, body.towerId)\n        if (granted) {\n            let result = await transactions.tower.remove({ ...body, humanId: client.humanId })\n            if (result.success) {\n                NetworkDriver.instance.group(body.towerId).boradcast.emit(client, Updater.instance.buildUpdate(requestId, Updater.instance.types.tower.onRemove, secureObject(result.tower, 'secret')))\n                Guardian.instance.rules.removeRules(body.towerId, result.memberIds)\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async search(client: Client, body: { query: string, offset?: number, count?: number, mine: boolean }, requestId: string) {\n        if (client.humanId) {\n            let result = await transactions.tower.search({ ...body, humanId: client.humanId })\n            if (result.success && result.towers) {\n                result.towers = result.towers.map((t: ITower) => t.secret.ownerId === client.humanId ? t : secureObject(t, 'secret'))\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async join(client: Client, body: { towerId: string }, requestId: string) {\n        if (client.humanId) {\n            let result = await transactions.tower.join({ ...body, requesterId: client.humanId })\n            if (result.success) {\n                NetworkDriver.instance.group(body.towerId).boradcast.emit(client, Updater.instance.buildUpdate(requestId, Updater.instance.types.tower.onHumanJoin, secureObject(result.member, 'secret')))\n                Guardian.instance.rules.addRule(result.member.towerId, result.member.humanId, result.member.secret.permissions)\n                client.updateTowerId(result.member.towerId, result.member.secret.permissions)\n                client.joinTower(result.member.towerId)\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async readById(client: Client, body: { towerId: string }, requestId: string) {\n        return transactions.tower.readById({ ...body, humanId: client.humanId })\n    }\n    async readMembers(client: Client, body: { towerId: string }, requestId: string) {\n        let { granted } = await Guardian.instance.authorize(client, body.towerId)\n        if (granted) {\n            return transactions.tower.readMembers({ ...body, humanId: client.humanId })\n        } else {\n            return { success: false }\n        }\n    }\n    async read(client: Client, body: {}, requestId: string) {\n        if (client.humanId) {\n            let result = await transactions.tower.read({ humanId: client.humanId })\n            if (result.success && result.towers) {\n                result.towers = result.towers.map((t: ITower) => t.secret.ownerId === client.humanId ? t : secureObject(t, 'secret'))\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async addMember(towerId: string, humanId: string) {\n        let result = await transactions.tower.addMember({ humanId, towerId })\n        return result\n    }\n}\n\nexport default TowerService\n","import Client from \"../drivers/network/client\";\nimport * as transactions from '../database/transactions/transactions'\nimport { secureObject } from \"../utils/filter\";\nimport { IRoom } from \"../models/room.model\";\nimport NetworkDriver from \"../drivers/network/network\";\nimport MemoryDriver from \"drivers/memory/memory\";\nimport Extendables, { EntityTypes } from \"../extendables\";\nimport Guardian from \"../guardian\";\nimport Updater from \"../updater\";\n\nclass RoomService {\n    extendables: Extendables\n    constructor(meta: { extendables: Extendables }) {\n        this.extendables = meta.extendables\n    }\n    async create(client: Client, body: { towerId: string, title: string, avatarId: string, isPublic: boolean, floor: string }, requestId: string) {\n        let { granted } = await Guardian.instance.authorize(client, body.towerId)\n        if (granted) {\n            let result = await transactions.room.create({ ...body, humanId: client.humanId, creationCallback: this.extendables.store[EntityTypes.ROOM_CREATION] })\n            if (result.success) {\n                NetworkDriver.instance.group(body.towerId).boradcast.emit(client, Updater.instance.buildUpdate(requestId, Updater.instance.types.room.onCreate,\n                    secureObject(result.room, 'secret')\n                ))\n                await MemoryDriver.instance.save(`struct:${body.towerId}:${result.room.id}`, true)\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async remove(client: Client, body: { towerId: string, roomId: string }, requestId: string) {\n        let { granted } = await Guardian.instance.authorize(client, body.towerId)\n        if (granted) {\n            let result = await transactions.room.remove({ ...body, humanId: client.humanId })\n            if (result.success) {\n                NetworkDriver.instance.group(body.towerId).boradcast.emit(client, Updater.instance.buildUpdate(requestId, Updater.instance.types.room.onRemove,\n                    secureObject(result.room, 'secret')\n                ))\n                await MemoryDriver.instance.remove(`struct:${body.towerId}:${result.room.id}`)\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async search(client: Client, body: { query: string, offset?: number, count?: number, towerId: string }, requestId: string) {\n        let { granted } = await Guardian.instance.authorize(client, body.towerId)\n        if (granted) {\n            let result = await transactions.room.search({ ...body, humanId: client.humanId })\n            if (result.success && result.rooms) {\n                if (!result.tower.secret.adminIds.includes(client.humanId)) {\n                    result.rooms = result.rooms.map((r: IRoom) => secureObject(r, 'secret'))\n                }\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async readById(client: Client, body: { towerId: string, roomId: string }, requestId: string) {\n        if (client.humanId) {\n            return transactions.room.readById({ ...body, humanId: client.humanId })\n        } else {\n            return { success: false }\n        }\n    }\n    async update(client: Client, body: { towerId: string, roomId: string, title: string, avatarId: string, isPublic: string }, requestId: string) {\n        let { granted } = await Guardian.instance.authorize(client, body.towerId)\n        if (granted) {\n            let result = await transactions.room.update({ ...body, humanId: client.humanId })\n            if (result.success) {\n                NetworkDriver.instance.group(body.towerId).boradcast.emit(client, Updater.instance.buildUpdate(requestId, Updater.instance.types.room.onUpdate,\n                    secureObject(result.room, 'secret')\n                ))\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n}\n\nexport default RoomService\n","\nimport Client from \"../drivers/network/client\";\nimport BaseController from \"./base.controller\";\nimport RoomService from \"services/room.service\";\n\nclass RoomController extends BaseController {\n    service: RoomService\n    constructor(service: RoomService) {\n        super()\n        this.service = service\n    }\n    getName() { return 'room' }\n    async create(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.create(client, body, requestId)\n        response(result)\n    }\n    async remove(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.remove(client, body, requestId)\n        response(result)\n    }\n    async search(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.search(client, body, requestId)\n        response(result)\n    }\n    async readById(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.readById(client, body, requestId)\n        response(result)\n    }\n    async update(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.update(client, body, requestId)\n        response(result)\n    }\n}\n\nexport default RoomController\n","\nimport InviteService from \"services/invite.service\";\nimport Client from \"../drivers/network/client\";\nimport BaseController from \"./base.controller\";\n\nclass InviteController extends BaseController {\n    service: InviteService\n    constructor(service: InviteService) {\n        super()\n        this.service = service\n    }\n    getName() { return 'invite' }\n    async create(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.create(client, body, requestId)\n        response(result)\n    }\n    async cancel(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.cancel(client, body, requestId)\n        response(result)\n    }\n    async accept(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.accept(client, body, requestId)\n        response(result)\n    }\n    async decline(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.decline(client, body, requestId)\n        response(result)\n    }\n    async read(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.read(client, body, requestId)\n        response(result)\n    }\n}\n\nexport default InviteController\n","import Client from \"../drivers/network/client\"\nimport * as transactions from '../database/transactions/transactions'\nimport updater from \"../updater\"\nimport NetworkDriver from \"../drivers/network/network\"\nimport { secureObject } from \"../utils/filter\"\nimport { IRoom } from \"../models/room.model\"\nimport guardian from \"../guardian\"\n\nclass InviteService {\n    async create(client: Client, body: { towerId: string, targetHumanId: string }, requestId: string) {\n        let { granted, rights } = await guardian.authorize(client, body.towerId)\n        if (granted) {\n            let result = await transactions.invite.create({ ...body, senderId: client.humanId })\n            if (result.success) {\n                NetworkDriver.instance.clients[body.targetHumanId]?.emit(updater.buildUpdate(requestId, updater.types.invite.onCreate, result.invite))\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async cancel(client: Client, body: { towerId: string, inviteId: string }, requestId: string) {\n        let { granted, rights } = await guardian.authorize(client, body.towerId)\n        if (granted) {\n            let result = await transactions.invite.cancel({ ...body, humanId: client.humanId })\n            if (result.success) {\n                NetworkDriver.instance.clients[result.targetHumanId]?.emit(updater.buildUpdate(requestId, updater.types.invite.onCancel, body.inviteId))\n                delete result.targetHumanId\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async decline(client: Client, body: { towerId: string, inviteId: string }, requestId: string) {\n        if (client.humanId) {\n            let result = await transactions.invite.decline({ ...body, humanId: client.humanId })\n            if (result.success) {\n                result.adminIds.forEach((adminId: string) => {\n                    NetworkDriver.instance.clients[adminId]?.emit(updater.buildUpdate(requestId, updater.types.invite.onDecline, body.inviteId))\n                });\n                delete result.adminIds\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async accept(client: Client, body: { towerId: string, inviteId: string }, requestId: string) {\n        if (client.humanId) {\n            let result = await transactions.invite.accept({ ...body, humanId: client.humanId })\n            if (result.success) {\n                result.tower.secret.adminIds.forEach((adminId: string) => {\n                    NetworkDriver.instance.clients[adminId]?.emit(updater.buildUpdate(requestId, updater.types.invite.onAccept, body.inviteId))\n                });\n                guardian.rules.addRule(result.member.towerId, result.member.humanId, result.member.secret.permissions)\n                client.updateTowerId(result.member.towerId, result.member.secret.permissions)\n                client.joinTower(result.member.towerId)\n                result.tower = secureObject(result.tower, 'secret')\n                result.room = secureObject(result.room, 'secret')\n                result.rooms = result.rooms.map((room: IRoom) => secureObject(room, 'secret'))\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async read(client: Client, body: {}, requestId: string) {\n        if (client.humanId) {\n            return transactions.invite.read({ humanId: client.humanId })\n        } else {\n            return { success: false }\n        }\n    }\n}\n\nexport default InviteService\n","\nimport Client from \"../drivers/network/client\";\nimport BaseController from \"./base.controller\";\nimport PermissionService from \"../services/permission.service\";\n\nclass PermissionController extends BaseController {\n    service: PermissionService\n    constructor(service: PermissionService) {\n        super()\n        this.service = service\n    }\n    getName() { return 'permission' }\n    async update(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.update(client, body, requestId)\n        response(result)\n    }\n    async read(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.read(client, body, requestId)\n        response(result)\n    }\n}\n\nexport default PermissionController\n","import Client from \"../drivers/network/client\";\nimport * as transactions from '../database/transactions/transactions'\nimport updater from \"../updater\";\nimport NetworkDriver from \"../drivers/network/network\";\nimport guardian from \"../guardian\";\n\nclass PermissionService {\n    async update(client: Client, body: { towerId: string, targetHumanId: string, permissions: { [id: string]: boolean } }, requestId: string) {\n        let { granted, rights } = await guardian.authorize(client, body.towerId)\n        if (granted) {\n           let result = await transactions.permission.update({ ...body, humanId: client.humanId })\n           NetworkDriver.instance.clients[body.targetHumanId]?.emit(updater.buildUpdate(requestId, updater.types.permission.onUpdate, body.permissions))\n           return result\n        } else {\n            return { success: false }\n        }\n    }\n    async read(client: Client, body: { towerId: string, targetHumanId: string }, requestId: string) {\n        let { granted, rights } = await guardian.authorize(client, body.towerId)\n        if (granted) {\n            return transactions.permission.read({ ...body, humanId: client.humanId })\n        } else {\n            return { success: false }\n        }\n    }\n}\n\nexport default PermissionService\n","import Client from \"../drivers/network/client\";\nimport * as transactions from '../database/transactions/transactions'\nimport guardian from \"guardian\";\nimport MemoryDriver from \"drivers/memory/memory\";\nimport NetworkDriver from \"drivers/network/network\";\n\nclass MachineService {\n    async create(client: Client, body: { name: string }, requestId: string) {\n        if (client.humanId) {\n            let result = await transactions.machine.create({ ...body, creatorId: client.humanId })\n            if (result.success) {\n                await MemoryDriver.instance.save(`auth:${result.machine.secret.token}`, result.machine.id)\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async update(client: Client, body: { machineId: string, name: string }, requestId: string) {\n        if (client.humanId) {\n            let result = await transactions.machine.update({ ...body, humanId: client.humanId })\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async remove(client: Client, body: { machineId: string }, requestId: string) {\n        if (client.humanId) {\n            let result = await transactions.machine.remove({ ...body, humanId: client.humanId })\n            if (result.success) {\n                await MemoryDriver.instance.remove(`auth:${result.machine.secret.token}`)\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async search(client: Client, body: { query: string, offset?: number, count?: number }, requestId: string) {\n        let result = await transactions.machine.search({ ...body })\n        return result\n    }\n    async read(client: Client, body: { offset?: number, count?: number }, requestId: string) {\n        let result = await transactions.machine.read({ ...body })\n        return result\n    }\n    async signIn(client: Client, body: { token: string }, requestId: string) {\n        let { granted, humanId } = await guardian.authenticate(body.token)\n        if (granted) {\n            let result = await transactions.machine.signIn(humanId)\n            client.updateHumanId(humanId)\n            NetworkDriver.instance.keepClient(body.token, client)\n            client.joinTowers(result.towerIds)\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n}\n\nexport default MachineService\n","\nimport Client from \"../drivers/network/client\";\nimport BaseController from \"./base.controller\";\nimport MachineService from \"services/machine.service\";\n\nclass MachineController extends BaseController {\n    service: MachineService\n    constructor(service: MachineService) {\n        super()\n        this.service = service\n    }\n    getName() { return 'machine' }\n    async create(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.create(client, body, requestId)\n        response(result)\n    }\n    async update(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.update(client, body, requestId)\n        response(result)\n    }\n    async remove(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.remove(client, body, requestId)\n        response(result)\n    }\n    async search(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.search(client, body, requestId)\n        response(result)\n    }\n    async read(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.read(client, body, requestId)\n        response(result)\n    }\n    async signIn(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.signIn(client, body, requestId)\n        response(result)\n    }\n}\n\nexport default MachineController\n","import Client from \"../drivers/network/client\";\nimport * as transactions from '../database/transactions/transactions'\nimport guardian from \"../guardian\";\nimport MemoryDriver from \"../drivers/memory/memory\";\nimport NetworkDriver from \"../drivers/network/network\";\nimport updater from \"../updater\";\nimport { IWorker } from \"models/worker.model\";\n\nclass WorkerService {\n\n    humanRequests: { [id: string]: string } = {};\n\n    async create(client: Client, body: { towerId: string, roomId: string, machineId: string, secret: any }, requestId: string) {\n        let { granted, rights } = await guardian.authorize(client, body.towerId)\n        if (granted) {\n            let result = await transactions.worker.create({ ...body, humanId: client.humanId })\n            if (result.success) {\n                await Promise.all([\n                    MemoryDriver.instance.save(`worker:${body.roomId}:${body.machineId}`, true),\n                    MemoryDriver.instance.save(`workerExtra:${body.roomId}:${result.worker.id}`, true),\n                    MemoryDriver.instance.save(`machineWorker:${result.worker.id}`, body.machineId)\n                ])\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async update(client: Client, body: { towerId: string, roomId: string, worker: IWorker }, requestId: string) {\n        let { granted, rights } = await guardian.authorize(client, body.towerId)\n        if (granted) {\n            let result = await transactions.worker.update({ ...body, humanId: client.humanId })\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async remove(client: Client, body: { workerId: string, towerId: string, roomId: string }, requestId: string) {\n        let { granted, rights } = await guardian.authorize(client, body.towerId)\n        if (granted) {\n            let result = await transactions.worker.remove({ ...body, humanId: client.humanId })\n            if (result.success) {\n                if (result.wasTheLast) {\n                    await Promise.all([\n                        MemoryDriver.instance.remove(`worker:${body.roomId}:${result.worker.machineId}`),\n                        MemoryDriver.instance.remove(`workerExtra:${body.roomId}:${body.workerId}`),\n                        MemoryDriver.instance.remove(`machineWorker:${result.worker.id}`)\n                    ])\n                } else {\n                    await Promise.all([\n                        MemoryDriver.instance.remove(`workerExtra:${body.roomId}:${body.workerId}`),\n                        MemoryDriver.instance.remove(`machineWorker:${result.worker.id}`)\n                    ])\n                }\n            }\n            return result\n        } else {\n            return { success: false }\n        }\n    }\n    async read(client: Client, body: { towerId: string, roomId: string }, requestId: string) {\n        let result = await transactions.worker.read({ ...body, humanId: client.humanId })\n        return result\n    }\n    async use(client: Client, body: { towerId?: string, roomId?: string, workerId?: string, machineId?: string, packet: any }, requestId: string) {\n        if (body.machineId) {\n            this.humanRequests[client.humanId] = body.machineId\n            body.packet.humanId = client.humanId\n            NetworkDriver.instance.clients[body.machineId]?.emit(updater.buildUpdate(requestId, { category: 'worker', key: 'onRequest' }, body.packet))\n            return { success: true };\n        } else {\n            let [res1, res2, res3] = await Promise.all([\n                MemoryDriver.instance.fetch(`struct:${body.towerId}:${body.roomId}`),\n                MemoryDriver.instance.fetch(`workerExtra:${body.roomId}:${body.workerId}`),\n                MemoryDriver.instance.fetch(`machineWorker:${body.workerId}`)\n            ])\n            if (res1 && res2) {\n                body.packet.towerId = body.towerId\n                body.packet.roomId = body.roomId\n                body.packet.workerId = body.workerId\n                body.packet.humanId = client.humanId\n                NetworkDriver.instance.clients[res3]?.emit(updater.buildUpdate(requestId, { category: 'worker', key: 'onRequest' }, body.packet))\n                return { success: true }\n            } else {\n                return { success: false }\n            }\n        }\n    }\n    async deliver(client: Client, body: { towerId?: string, roomId?: string, workerId?: string, humanId?: string, exceptionId?: string, packet: any }, requestId: string) {\n        if (body.towerId) {\n            if (body.humanId) {\n                let [res1, res2, res3] = await Promise.all([\n                    MemoryDriver.instance.fetch(`struct:${body.towerId}:${body.roomId}`),\n                    MemoryDriver.instance.fetch(`worker:${body.roomId}:${client.humanId}`),\n                    guardian.rules.isRule(body.towerId, body.humanId)\n                ])\n                if (res1 && res2 && res3) {\n                    body.packet.towerId = body.towerId\n                    body.packet.roomId = body.roomId\n                    body.packet.workerId = body.workerId\n                    body.packet.humanId = body.humanId\n                    NetworkDriver.instance.clients[body.humanId]?.emit(updater.buildUpdate(requestId, { category: 'worker', key: 'onResponse' }, body.packet))\n                    return { success: true }\n                } else {\n                    return { success: false }\n                }\n            } else {\n                let [res1, res2] = await Promise.all([\n                    MemoryDriver.instance.fetch(`struct:${body.towerId}:${body.roomId}`),\n                    MemoryDriver.instance.fetch(`worker:${body.roomId}:${client.humanId}`),\n                ])\n                if (res1 && res2) {\n                    body.packet.towerId = body.towerId\n                    body.packet.roomId = body.roomId\n                    body.packet.workerId = body.workerId\n                    if (body.exceptionId) {\n                        let exception = NetworkDriver.instance.clients[body.exceptionId]\n                        if (exception) {\n                            NetworkDriver.instance.group(body.towerId).boradcast.emit(exception, updater.buildUpdate(requestId, { category: 'worker', key: 'onResponse' }, body.packet))\n                        } else {\n                            NetworkDriver.instance.group(body.towerId).emit(updater.buildUpdate(requestId, { category: 'worker', key: 'onResponse' }, body.packet))\n                        }\n                    } else {\n                        NetworkDriver.instance.group(body.towerId).emit(updater.buildUpdate(requestId, { category: 'worker', key: 'onResponse' }, body.packet))\n                    }\n                    return { success: true }\n                } else {\n                    return { success: false }\n                }\n            }\n        } else {\n            if (body.humanId) {\n                if (this.humanRequests[body.humanId] === client.humanId) {\n                    body.packet.machineId = client.humanId\n                    NetworkDriver.instance.clients[body.humanId]?.emit(updater.buildUpdate(requestId, { category: 'worker', key: 'onResponse' }, body.packet))\n                    return { success: true }\n                } else {\n                    return { success: false }\n                }\n            } else {\n                return { success: false }\n            }\n        }\n    }\n}\n\nexport default WorkerService\n","\nimport Client from \"../drivers/network/client\";\nimport BaseController from \"./base.controller\";\nimport WorkerService from \"../services/worker.service\";\n\nclass WorkerController extends BaseController {\n    service: WorkerService\n    constructor(service: WorkerService) {\n        super()\n        this.service = service\n    }\n    getName() { return 'worker' }\n    async create(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.create(client, body, requestId)\n        response(result)\n    }\n    async update(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.update(client, body, requestId)\n        response(result)\n    }\n    async remove(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.remove(client, body, requestId)\n        response(result)\n    }\n    async use(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.use(client, body, requestId)\n        response(result)\n    }\n    async deliver(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.deliver(client, body, requestId)\n        response(result)\n    }\n    async read(client: Client, body: any, requestId: string, response: any) {\n        let result = await this.service.read(client, body, requestId)\n        response(result)\n    }\n}\n\nexport default WorkerController\n","import HumanService from \"../services/human.service\";\nimport HumanController from \"./human.controller\";\nimport NetworkDriver from \"../drivers/network/network\";\nimport TowerController from \"./tower.controller\";\nimport TowerService from \"../services/tower.service\";\nimport RoomService from \"../services/room.service\";\nimport RoomController from \"./room.controller\";\nimport InviteController from \"./invite.controller\";\nimport InviteService from \"../services/invite.service\";\nimport PermissionController from \"./permission.controller\";\nimport PermissionService from \"../services/permission.service\";\nimport MachineService from \"../services/machine.service\";\nimport MachineController from \"./machine.controller\";\nimport WorkerService from \"services/worker.service\";\nimport WorkerController from \"./worker.controller\";\nimport Extending from \"../extendables\";\n\nconst build = (extending: Extending) => {\n    NetworkDriver.instance.registerController(HumanController, HumanService, { extending })\n    NetworkDriver.instance.registerController(TowerController, TowerService, { extending })\n    NetworkDriver.instance.registerController(RoomController, RoomService, { extending })\n    NetworkDriver.instance.registerController(InviteController, InviteService, { extending })\n    NetworkDriver.instance.registerController(PermissionController, PermissionService, { extending })\n    NetworkDriver.instance.registerController(MachineController, MachineService, { extending })\n    NetworkDriver.instance.registerController(WorkerController, WorkerService, { extending })\n}\n\nexport {\n    build\n}\n","\nimport StorageDriver from \"./database/index\"\nimport NetworkDriver from \"./drivers/network/network\"\nimport MemoryDriver from \"./drivers/memory/memory\"\nimport * as Controllers from './controllers'\nimport CustomController from \"./controllers/custom.controller\"\nimport BaseMachine from \"./machines/base.machine\"\nimport { setupConfig } from \"./config\"\nimport updaterEngine from \"updater\"\nimport Extendables from \"./extendables\"\nimport { Express } from \"express\"\nimport { Server as HttpServer } from 'node:http';\nimport Guardian from \"./guardian\"\n\nclass Sigma {\n    extendables: Extendables\n    async start(): Promise<void> {\n        return new Promise(resolve => {\n            StorageDriver.initialize(() => {\n                Guardian.initialize()\n                MemoryDriver.initialize()\n                updaterEngine.initialize()\n                NetworkDriver.initialize(() => {\n                    Controllers.build(this.extendables)\n                    resolve()\n                })\n            })\n        })\n    }\n    shell(machines: Array<BaseMachine>) {\n        machines.forEach((machine: BaseMachine) => {\n            let controller = new CustomController(machine.getName(), machine)\n            NetworkDriver.instance.registerCustomController(controller)\n        })\n    }\n    expressApp(): Express {\n        return NetworkDriver.instance.app\n    }\n    httpServer(): HttpServer {\n        return NetworkDriver.instance.server\n    }\n    guardian(): Guardian {\n        return Guardian.instance\n    }\n    updater() {\n        return updaterEngine.instance\n    }\n    client(humanId: string) {\n        return NetworkDriver.instance.clients[humanId]\n    }\n    service(serviceName: string) {\n        return NetworkDriver.instance.services[serviceName]\n    }\n    constructor(conf: any) {\n        setupConfig(conf)\n        this.extendables = new Extendables()\n    }\n}\n\nexport default Sigma\n","\nclass BaseService {\n\n}\n\nexport default BaseService\n","\nimport config from \"config\";\nimport Client from \"../drivers/network/client\";\nimport BaseService from \"../services/base.service\";\nimport fs from 'fs';\nimport express from 'express'\nimport Guardian from \"../guardian\";\n\nabstract class BaseMachine extends BaseService {\n    abstract getName(): string\n    abstract getService(): { [id: string]: any }\n    abstract getClient(): string\n    route(key: Array<string>, client: Client, body: any) {\n        return new Promise(async (resolve, reject) => {\n            let action = this.getService()\n            for (const element of key) {\n                action = action[element]\n            }\n            if (action) {\n                if (action.guardian.authenticate) {\n                    if (!client.humanId) {\n                        reject()\n                        return\n                    }\n                }\n                let report: any = undefined\n                if (action.guardian.inRoom && !body['roomId']) {\n                    reject()\n                    return\n                }\n                if (action.guardian.authorize) {\n                    let result = await Guardian.instance.authorize(client, body['towerId'], body['roomId'])\n                    if (result?.granted) {\n                        report = { towerId: body.towerId, rights: result.rights, roomId: result.roomId }\n                    } else {\n                        reject()\n                        return\n                    }\n                }\n                resolve(action.func(client, body, {\n                    storage: {\n                        write: async (relativePath: string, data: any) => {\n                            if (body.roomId) {\n                                let path = `${config.TEMP_STORAGE}/storage/${body.roomId}/${relativePath}`\n                                let pathParts = path.split('/')\n                                pathParts.pop()\n                                await fs.promises.mkdir(pathParts.join('/'), { recursive: true })\n                                await fs.promises.writeFile(path, data, { flag: \"a+\" })\n                            }\n                        },\n                        remove: async (relativePath: string) => {\n                            if (body.roomId) {\n                                await fs.promises.rm(`${config.TEMP_STORAGE}/storage/${body.roomId}/${relativePath}`)\n                            }\n                        }\n                    }\n                }, report))\n            } else {\n                reject()\n                return\n            }\n        })\n    }\n    routeRest(key: Array<string>, client: Client, req: express.Request, res: express.Response) {\n        return new Promise(async (resolve, reject) => {\n            let action = this.getService()\n            for (let i = 0; i < key.length; i++) {\n                action = action[key[i]]\n            }\n            if (action) {\n                if (action.guardian.authenticate) {\n                    if (!client?.humanId) {\n                        reject(2)\n                        return\n                    }\n                }\n                let report: any = undefined\n                if (action.guardian.inRoom && !req.headers['roomid']) {\n                    reject(3)\n                    return\n                }\n                if (action.guardian.authorize) {\n                    let result = await Guardian.instance.authorize(client, req.headers['towerid']?.toString(), req.headers['roomid'].toString())\n                    if (result?.granted) {\n                        report = { towerId: req.headers['towerid'].toString(), rights: result.rights, roomId: req.headers['roomid'].toString() }\n                    } else {\n                        reject(4)\n                        return\n                    }\n                }\n                resolve(action.func(client, req, res, {\n                    storage: {\n                        write: async (relativePath: string, data: any) => {\n                            if (req.headers['roomid']) {\n                                let path = `${config.TEMP_STORAGE}/storage/${req.headers['roomid'].toString()}/${relativePath}`\n                                let pathParts = path.split('/')\n                                pathParts.pop()\n                                await fs.promises.mkdir(pathParts.join('/'), { recursive: true })\n                                await fs.promises.writeFile(path, data, { flag: \"a+\" })\n                            }\n                        },\n                        remove: async (relativePath: string) => {\n                            if (req.headers['roomid']) {\n                                await fs.promises.rm(`${config.TEMP_STORAGE}/storage/${req.headers['roomid'].toString()}/${relativePath}`)\n                            }\n                        }\n                    }\n                }, report))\n            } else {\n                reject(5)\n                return\n            }\n        })\n    }\n}\n\nexport default BaseMachine\n","import Client from \"../../drivers/network/client\"\n\nclass Action {\n    guardian: {\n        authenticate?: boolean,\n        authorize?: boolean,\n        inRoom?: boolean\n    }\n    func: any\n    constructor(\n        guardian: { authenticate?: boolean, authorize?: boolean, inRoom?: boolean },\n        func: any\n    ) {\n        this.guardian = guardian\n        this.func = func\n    }\n}\n\nexport default Action\n"],"mappings":"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","names":["import_mongoose","mongoose","mongoose","update","import_mongoose","import_mongoose","prepare","mongoose","mongoose","update","import_mongoose","import_mongoose","prepare","mongoose","mongoose","update","import_mongoose","import_mongoose","prepare","mongoose","mongoose","update","import_mongoose","import_mongoose","prepare","mongoose","mongoose","update","import_mongoose","import_mongoose","prepare","mongoose","mongoose","update","import_mongoose","import_mongoose","prepare","mongoose","mongoose","update","import_mongoose","import_mongoose","prepare","mongoose","import_mongoose","prepare","mongoose","import_mongoose","prepare","mongoose","prepare","import_mongoose","mongoose","update","import_mongoose","update","mongoose","update","express","cors","import_mongoose","mongoose","import_mongoose","mongoose","import_mongoose","mongoose","import_mongoose","mongoose","readById_default","search_default","update_default","import_mongoose","mongoose","import_mongoose","update","mongoose","update_default","import_mongoose","mongoose","import_mongoose","search","mongoose","search_default","import_mongoose","mongoose","import_mongoose","readById","mongoose","readById_default","import_mongoose","mongoose","import_mongoose","mongoose","import_mongoose","mongoose","create_default","readById_default","remove_default","search_default","update_default","import_mongoose","create","mongoose","create_default","import_mongoose","remove","mongoose","remove_default","import_mongoose","search","mongoose","search_default","import_mongoose","readById","mongoose","readById_default","import_mongoose","update","mongoose","update_default","create_default","read_default","import_mongoose","create","mongoose","create_default","import_mongoose","mongoose","import_mongoose","mongoose","import_mongoose","mongoose","read","read_default","read_default","update_default","import_mongoose","update","mongoose","member","update_default","import_mongoose","read","mongoose","read_default","create_default","read_default","remove_default","search_default","signIn_default","update_default","import_mongoose","create","mongoose","create_default","import_mongoose","update","mongoose","update_default","import_mongoose","remove","mongoose","remove_default","import_mongoose","search","mongoose","search_default","import_mongoose","read","mongoose","read_default","signIn","signIn_default","create_default","read_default","remove_default","update_default","import_mongoose","create","mongoose","create_default","import_mongoose","remove","mongoose","remove_default","import_mongoose","read","mongoose","read_default","import_mongoose","update","mongoose","update_default","tower_exports","room_exports","onRemove_default","onUpdate_default","onUpdate_default","onRemove_default","permission_exports","onUpdate_default","onUpdate_default","invite_exports","onCreate_default","onCreate_default","worker_exports","tower_exports","room_exports","permission_exports","invite_exports","worker_exports","build","build","fs"]}