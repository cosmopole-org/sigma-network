/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./src/runtime/react/diff.js
let updates = [];
let diffStack = [];
let pp = "";
const generatePath = () => {
  if (pp.length > 0) {
    return pp + "/" + diffStack.join("/");
  } else {
    return diffStack.join("/");
  }
};
const generatePathForProps = () => {
  if (pp.length > 0) {
    if (diffStack.length > 1) {
      return pp + "/" + diffStack.slice(0, diffStack.length - 1).join("/");
    } else {
      return pp;
    }
  } else {
    return diffStack.slice(0, diffStack.length - 1).join("/");
  }
};
let findChanges = (parentKey, el1, el2) => {
  if (el1 === undefined) {
    updates.push({
      __action__: 'element_created',
      __key__: el2.key,
      __element__: el2,
      __parentKey__: parentKey,
      path: generatePath()
    });
    return;
  }
  if (el2 === undefined) {
    updates.push({
      __action__: 'element_deleted',
      __key__: el1.key,
      __parentKey__: parentKey,
      path: generatePath()
    });
    return;
  }
  if (el2.key === undefined) {
    if (el2 !== el1) {
      updates.push({
        __action__: 'raw_updated',
        __element__: el2,
        __parentKey__: parentKey,
        path: generatePathForProps()
      });
    }
    return;
  }
  if (el1.key !== el2.key) {
    updates.push({
      __action__: 'element_deleted',
      __key__: el1.key,
      __parentKey__: parentKey,
      path: generatePath()
    }, {
      __action__: 'element_created',
      __key__: el2.key,
      __element__: el2,
      __parentKey__: parentKey,
      path: generatePath()
    });
    return;
  }
  let propsChanges = {
    __action__: 'props_updated',
    __key__: el2.key,
    __created__: {},
    __deleted__: {},
    __updated__: {},
    path: generatePathForProps()
  };
  for (let pKey in el2.props) {
    if (el1.props[pKey] === undefined) {
      propsChanges.__created__[pKey] = el2.props[pKey];
    }
  }
  for (let pKey in el1.props) {
    if (el2.props[pKey] === undefined) {
      propsChanges.__deleted__[pKey] = el2.props[pKey];
    }
  }
  for (let pKey in el2.props) {
    if (el1.props[pKey] !== undefined && el2.props[pKey] !== undefined) {
      if (el1.props[pKey] !== el2.props[pKey]) {
        propsChanges.__updated__[pKey] = el2.props[pKey];
      }
    }
  }
  if (Object.keys(propsChanges.__created__).length > 0 || Object.keys(propsChanges.__deleted__).length > 0 || Object.keys(propsChanges.__updated__).length > 0) {
    updates.push(propsChanges);
  }
  // let stylesChanges = { __action__: 'styles_updated', __key__: el2.key, __created__: {}, __deleted__: {}, __updated__: {} }
  // for (let sKey in el2._styles) {
  //     if (el1._styles[sKey] === undefined) {
  //         stylesChanges.__created__[sKey] = el2._styles[sKey]
  //     }
  // }
  // for (let sKey in el1._styles) {
  //     if (el2._styles[sKey] === undefined) {
  //         stylesChanges.__deleted__[sKey] = el2._styles[sKey]
  //     }
  // }
  // for (let sKey in el2._styles) {
  //     if (el1._styles[sKey] !== undefined && el2._styles[sKey] !== undefined) {
  //         if (el1._styles[sKey] !== el2._styles[sKey]) {
  //             stylesChanges.__updated__[sKey] = el2._styles[sKey]
  //         }
  //     }
  // }
  // if (
  //     (Object.keys(stylesChanges.__created__).length > 0) ||
  //     (Object.keys(stylesChanges.__deleted__).length > 0) ||
  //     (Object.keys(stylesChanges.__updated__).length > 0)
  // ) {
  //     updates.push(stylesChanges)
  // }
  let cs = {};
  el2.children.forEach((child, i) => {
    cs[child.key] = {
      child,
      index: i
    };
  });
  el1.children.forEach(child => {
    if (child.key === undefined) {
      // pass
    } else if (cs[child.key]) {
      diffStack.push(child.tagName + ":" + cs[child.key].index);
      findChanges(el1.key, child, cs[child.key].child);
      diffStack.pop();
    } else {
      updates.push({
        __action__: 'element_deleted',
        __key__: child.key,
        __parentKey__: el1.key,
        path: generatePath()
      });
    }
  });
  cs = {};
  el1.children.forEach(child => {
    cs[child.key] = child;
  });
  el2.children.forEach(child => {
    if (child.key === undefined) {
      updates.push({
        __action__: 'raw_updated',
        __element__: child,
        __parentKey__: el2.key,
        path: generatePathForProps()
      });
    } else if (!cs[child.key]) {
      updates.push({
        __action__: 'element_created',
        __key__: child.key,
        __element__: child,
        __parentKey__: el2.key,
        path: generatePath()
      });
    }
  });
};
const diff = (parentPath, parentKey, el1, el2) => {
  updates = [];
  diffStack = [];
  pp = parentPath;
  if (pp.startsWith("/")) {
    pp = pp.substring(1);
  }
  diffStack.push("div:0");
  findChanges(parentKey, el1, el2);
  diffStack.pop();
  return updates;
};
/* harmony default export */ const react_diff = (diff);
;// CONCATENATED MODULE: ./src/runtime/react/element.js
class Element {
  constructor(tagName, props, children) {
    if (Array.isArray(props)) {
      children = props;
      props = {};
    }
    this.tagName = tagName;
    this.props = props || {};
    this.children = children || [];
    this.key = props ? props.key : undefined;
  }
}
/* harmony default export */ const react_element = (Element);
;// CONCATENATED MODULE: ./src/runtime/react/react.js
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }


let vdom;
let targetFunc;
let callbackDict = {};
let keyCounter = 1;
let renderCache = {};
let stateCache = {};
let stateCounter = 0;
let lastUpdateOfRender;
let lastOldCache;
let tree = [];
let currentPath = "";
let currentKey;
let renderedChildren = {};
let keyChanges = {};
let indexCache = {};
let bindedStates = {};
let genKey = () => {
  return (keyCounter++).toString();
};
__webpack_require__.g.trigger = function trigger(callbackId) {
  let cb = callbackDict[callbackId];
  if (cb) cb();
};
class Dep {
  constructor(parentPath) {
    _defineProperty(this, "subs", void 0);
    _defineProperty(this, "parentPath", void 0);
    this.subs = new Set();
    this.parentPath = parentPath;
  }
  depend() {
    targetFunc && this.subs.add(targetFunc);
  }
  notify() {
    this.subs.forEach(sub => sub && sub(this.parentPath));
  }
}
const isFunction = target => typeof target === 'function';
const isObject = target => typeof target === 'object' && target !== null;
const clone = (acc, target) => {
  if (isObject(acc)) {
    Object.keys(acc).forEach(key => {
      if (isObject(acc[key])) target[key] = clone(acc[key], target[key]);else target[key] = acc[key];
    });
  } else {
    target = acc;
  }
  return target;
};
const setter = (prx, dep) => data => {
  const result = isFunction(data) ? data(prx.data) : data;
  if (isObject(result)) clone(result, prx.data);else prx.data = result;
  bindedStates = {};
  dep.notify();
  message(JSON.stringify({
    action: "update",
    element: {
      scope: dep.parentPath,
      updates: react_diff(dep.parentPath, undefined, lastOldCache, lastUpdateOfRender)
    }
  }));
};
const createOptions = dep => ({
  get(target, key) {
    if (isObject(target[key])) return new Proxy(target[key], createOptions(dep));
    return target[key];
  }
});
const createEffect = fun => {
  targetFunc = fun;
  let res = targetFunc();
  targetFunc = null;
  return res;
};
const flatten = (result, child) => {
  if (Array.isArray(child)) {
    child.forEach(nestedChild => {
      flatten(result, nestedChild);
    });
  } else {
    result.push(child);
  }
};
const React = {
  createElement: function (tag, props) {
    for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }
    if (props === undefined || props === null) {
      props = {};
    }
    if (children === undefined || children === null) {
      children = [];
    }
    if (isFunction(tag)) {
      return (counter, parentKey) => {
        if (props.key === undefined) {
          props.key = parentKey + "_child";
        }
        indexCache[currentPath + "|" + props.key] = counter;
        return createEffect(parentPath => {
          if (parentPath === undefined) {
            parentPath = tree.join("/");
          }
          let counterInner = indexCache[parentPath + "|" + props.key];
          if (counterInner === undefined) {
            counterInner = 0;
          }
          let path = (parentPath ? parentPath + "/" : "") + (tag.name + ":" + counterInner);
          let cpBackup = currentPath;
          currentPath = path;
          let keyBackup = currentKey;
          if (props.key !== undefined) {
            currentKey = props.key;
          }
          let scBackup = stateCounter;
          stateCounter = 0;
          let treeBackup = tree;
          tree = parentPath.split("/");
          tree.push(tag.name + ":" + counterInner);
          let kcBackup = keyChanges;
          keyChanges = {};
          let pathesOfChildren = {};
          let keys = Object.keys(stateCache);
          for (const pathKey of keys) {
            if (pathKey.startsWith(path) && path != pathKey) {
              pathesOfChildren[pathKey] = stateCache[pathKey].key;
            }
          }
          let rcBackup = renderedChildren;
          renderedChildren = {};
          lastUpdateOfRender = tag(props, children)(undefined, props.key);
          let pocl = Object.keys(pathesOfChildren);
          let rch = Object.keys(renderedChildren);
          pocl.forEach(ck => {
            let found = false;
            for (let rcp of rch) {
              if (ck.startsWith(rcp)) {
                found = true;
                break;
              }
            }
            if (!found) {
              delete stateCache[ck];
            }
          });
          renderedChildren = rcBackup;
          renderedChildren[path] = props.key;
          keyChanges = kcBackup;
          tree.pop();
          tree = treeBackup;
          stateCounter = scBackup;
          currentKey = keyBackup;
          lastOldCache = renderCache[path];
          renderCache[path] = lastUpdateOfRender;
          currentPath = cpBackup;
          return lastUpdateOfRender;
        });
      };
    }
    return (counter, parentKey) => {
      if (counter === undefined) {
        counter = 0;
      }
      if (props.key === undefined) {
        props.key = parentKey + "_child";
      }
      let elTag = tag;
      let elProps = {};
      Object.entries(props).forEach(_ref => {
        let [name, value] = _ref;
        if (name.startsWith('on')) {
          let callbackId = genKey();
          callbackDict[callbackId] = value;
          elProps[name.toLowerCase()] = callbackId;
        } else {
          elProps[name] = value;
        }
      });
      let treeBackup = tree;
      tree = currentPath.split("/");
      tree.push(tag + ":" + counter);
      let cpBackup = currentPath;
      currentPath = tree.join("/");
      let keyBackup = currentKey;
      if (props.key !== undefined) {
        currentKey = props.key;
      }
      let path = tree.join("/");
      let pathesOfChildren = {};
      let keys = Object.keys(stateCache);
      for (const pathKey of keys) {
        if (pathKey.startsWith(path) && path != pathKey) {
          pathesOfChildren[pathKey] = stateCache[pathKey].key;
        }
      }
      let rcBackup = renderedChildren;
      renderedChildren = {};
      let c = [];
      flatten(c, children);
      let childs = c.map((child, i) => {
        if (isFunction(child)) {
          return child(i, props.key);
        } else {
          return child;
        }
      });
      let pocl = Object.keys(pathesOfChildren);
      let rch = Object.keys(renderedChildren);
      pocl.forEach(ck => {
        let found = false;
        for (let rcp of rch) {
          if (ck.startsWith(rcp)) {
            found = true;
            break;
          }
        }
        if (!found) {
          delete stateCache[ck];
        }
      });
      renderedChildren = rcBackup;
      renderedChildren[path] = props.key;
      currentPath = cpBackup;
      currentKey = keyBackup;
      let element = new react_element(elTag, elProps, childs.filter(child => child !== null));
      tree.pop();
      tree = treeBackup;
      return element;
    };
  },
  init: rootComp => {
    currentPath = "App:0";
    vdom = rootComp(0);
    renderCache["App:0"] = vdom;
    message(JSON.stringify({
      action: "init",
      element: vdom
    }));
    return vdom;
  },
  useState: data => {
    let path = currentPath;
    let statesHolder = stateCache[path];
    if (statesHolder === undefined || statesHolder.key !== currentKey) {
      if (statesHolder !== undefined && statesHolder.key !== currentKey) {
        let oldPathArr = path.split("/");
        let keys = Object.keys(stateCache);
        let foundOriginal = false;
        for (const pathKey of keys) {
          if (pathKey === path) {
            foundOriginal = true;
            continue;
          }
          if (!foundOriginal) {
            continue;
          }
          if (stateCache[pathKey].key === currentKey) {
            let newPathArrTest = pathKey.split("/");
            if (oldPathArr.length === newPathArrTest.length) {
              if (bindedStates[pathKey + "|" + stateCache[pathKey].key] !== true) {
                let diffCount = 0;
                let diffPart;
                for (let i = 0; i < oldPathArr.length; i++) {
                  if (oldPathArr[i] !== newPathArrTest[i]) {
                    diffPart = oldPathArr[i];
                    diffCount++;
                  }
                }
                if (diffCount === 1) {
                  let statesHolderNew = stateCache[pathKey];
                  statesHolderNew.dep.parentPath = path.includes("/") ? path.substring(0, path.lastIndexOf("/")) : "";
                  stateCache[path] = statesHolderNew;
                  indexCache[newPathArrTest.slice(0, newPathArrTest.length - 1).join("/") + "|" + statesHolderNew.key] = Number(diffPart.split(":")[1]);
                  let state = statesHolderNew.states[stateCounter];
                  stateCounter++;
                  bindedStates[pathKey + "|" + statesHolderNew.key] = true;
                  return state;
                }
              }
            }
          }
        }
      } else if (statesHolder === undefined) {
        let oldPathArr = path.split("/");
        let keys = Object.keys(stateCache);
        for (const pathKey of keys) {
          if (stateCache[pathKey].key === currentKey) {
            let newPathArrTest = pathKey.split("/");
            if (oldPathArr.length === newPathArrTest.length) {
              if (bindedStates[pathKey + "|" + stateCache[pathKey].key] !== true) {
                let diffCount = 0;
                let diffPart;
                for (let i = 0; i < oldPathArr.length; i++) {
                  if (oldPathArr[i] !== newPathArrTest[i]) {
                    diffPart = oldPathArr[i];
                    diffCount++;
                  }
                }
                if (diffCount === 1) {
                  let statesHolderNew = stateCache[pathKey];
                  statesHolderNew.dep.parentPath = path.includes("/") ? path.substring(0, path.lastIndexOf("/")) : "";
                  stateCache[path] = statesHolderNew;
                  indexCache[newPathArrTest.slice(0, newPathArrTest.length - 1).join("/") + "|" + statesHolderNew.key] = Number(diffPart.split(":")[1]);
                  let state = statesHolderNew.states[stateCounter];
                  stateCounter++;
                  bindedStates[pathKey + "|" + statesHolderNew.key] = true;
                  return state;
                }
              }
            }
          }
        }
      }
      const dep = new Dep(path.includes("/") ? path.substring(0, path.lastIndexOf("/")) : "");
      dep.depend();
      const prx = new Proxy({
        data
      }, createOptions(dep));
      let state = [() => prx.data, setter(prx, dep)];
      stateCache[path] = {
        states: [state],
        key: currentKey,
        dep
      };
      stateCounter++;
      bindedStates[path + "|" + currentKey] = true;
      return state;
    }
    let state = statesHolder.states[stateCounter];
    stateCounter++;
    bindedStates[path + "|" + statesHolder.key] = true;
    return state;
  },
  setTimeout: (cb, time) => {
    let callbackId = genKey();
    callbackDict[callbackId] = cb;
    message(JSON.stringify({
      action: "setTimeout",
      callbackId,
      time
    }));
  }
};
/* harmony default export */ const react = (React);
;// CONCATENATED MODULE: ./src/runtime/react/index.js


;// CONCATENATED MODULE: ./src/components/App.jsx

const Counter = () => {
  const [count, setCount] = react.useState(0);
  let onClick = () => {
    setCount(c => c + 1);
  };
  return /*#__PURE__*/react.createElement("button", {
    style: "width: 200px; height: 200px;",
    onClick: onClick
  }, count());
};
let kCounter = 1;
const generateKey = () => {
  return "a_" + kCounter++;
};
const Test = () => {
  const [list, setList] = react.useState([]);
  let onClick = () => {
    setList(l => {
      l.push(generateKey());
      return l;
    });
  };
  let onClick2 = () => {
    setList(l => {
      l.splice(0, 1);
      return l;
    });
  };
  return /*#__PURE__*/react.createElement("div", {
    key: "container",
    style: "background-color: blue;"
  }, /*#__PURE__*/react.createElement("button", {
    key: "adderBtn",
    style: "width: 200px; height: 200px; background-color: yellow;",
    onClick: onClick
  }, "add"), /*#__PURE__*/react.createElement("button", {
    key: "adderBtn2",
    style: "width: 200px; height: 200px; background-color: green;",
    onClick: onClick2
  }, "remove"), list().map(d => /*#__PURE__*/react.createElement("div", {
    key: d
  }, /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement(Counter, null)))));
};
const App = () => {
  return /*#__PURE__*/react.createElement(Test, null);
};
/* harmony default export */ const components_App = (App);
;// CONCATENATED MODULE: ./src/index.jsx


react.init( /*#__PURE__*/react.createElement(components_App, {
  name: "foo"
}));
/******/ })()
;