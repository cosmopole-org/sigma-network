{"version":3,"sources":["../src/Desktop.tsx","../src/AppletHost.tsx"],"names":["MwcDriver","root","import_react","import_jsx_runtime","Host"],"mappings":"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","sourcesContent":["\nimport * as RGL from \"react-grid-layout\";\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\nimport AppletHost from \"./AppletHost\";\nimport { useState } from \"react\";\n\nconst ResponsiveReactGridLayout = RGL.WidthProvider(RGL.Responsive);\n\nlet desktops: { [id: string]: DesktopData } = {}\n\nclass DesktopData {\n    key: string\n    layouts: RGL.Layouts = { lg: [], md: [], sm: [], xs: [], xxs: [] }\n    jsxContent: { [id: string]: string } = {}\n    layoutCnangeFromUICallback?: (layouts: RGL.Layouts, updates: Array<any>) => void\n    layoutCnangeFromCodeCallback?: (layouts: RGL.Layouts) => void\n    layoutCnangeFromCodeInternallCallback?: (layouts: RGL.Layouts) => void\n    constructor() {\n        this.key = Math.random().toString()\n        desktops[this.key] = this\n    }\n    fill(layouts: RGL.Layouts, jsxContent: { [id: string]: string }) {\n        this.jsxContent = jsxContent\n        this.layouts = layouts\n    }\n    destroy() {\n        delete desktops[this.key]\n    }\n    addWidget(widget: { id: string, jsxCode: string, gridData: { w: number, h: number } }) {\n        (['lg', 'md', 'sm', 'xs', 'xxs']).forEach((sizeKey: string) => {\n            let y = this.layouts[sizeKey].length > 0 ?\n                Math.max(...this.layouts[sizeKey].filter(item => {\n                    return (item.x < widget.gridData.w)\n                }).map(item => (item.y + item.h))) :\n                0\n            this.layouts[sizeKey].push({ ...widget.gridData, x: 0, y, i: widget.id })\n        })\n        this.jsxContent[widget.id] = widget.jsxCode\n        this.layoutCnangeFromCodeCallback && this.layoutCnangeFromCodeCallback(this.layouts)\n        this.layoutCnangeFromCodeInternallCallback && this.layoutCnangeFromCodeInternallCallback(this.layouts)\n    }\n    removeWidget(id: string) {\n        delete this.jsxContent[id];\n        (['lg', 'md', 'sm', 'xs', 'xxs']).forEach((sizeKey: string) => {\n            this.layouts[sizeKey] = this.layouts[sizeKey].filter(w => w.i !== id)\n        })\n        this.layoutCnangeFromCodeCallback && this.layoutCnangeFromCodeCallback(this.layouts)\n        this.layoutCnangeFromCodeInternallCallback && this.layoutCnangeFromCodeInternallCallback(this.layouts)\n    }\n    onLayoutChangeByUI(callback: (layouts: RGL.Layouts, updates: Array<any>) => void) {\n        this.layoutCnangeFromUICallback = callback\n    }\n    onLayoutChangeByCode(callback: (layouts: RGL.Layouts) => void) {\n        this.layoutCnangeFromCodeCallback = callback\n    }\n    onLayoutChangeByCodeInternally(callback: (layouts: RGL.Layouts) => void) {\n        this.layoutCnangeFromCodeInternallCallback = callback\n    }\n    updateLayoutsInternally(layouts: RGL.Layouts, updates: Array<any>) {\n        this.layouts = layouts\n        this.layoutCnangeFromUICallback && this.layoutCnangeFromUICallback(layouts, updates)\n    }\n}\n\nconst Host = (props: { desktopKey: string, editMode: boolean, style: any }) => {\n    const [trigger, setTrigger] = useState(false)\n    let desktop = desktops[props.desktopKey]\n    desktop.onLayoutChangeByCodeInternally((_: RGL.Layouts) => setTrigger(!trigger))\n    console.log(desktop.layouts)\n    return (\n        <ResponsiveReactGridLayout\n            className=\"layout\"\n            style={{ minWidth: \"100%\" }}\n            measureBeforeMount={true}\n            useCSSTransforms={false}\n            breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}\n            cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\n            rowHeight={30}\n            width={props.style.width}\n            layouts={structuredClone(desktop.layouts)}\n            isDraggable={props.editMode}\n            isResizable={props.editMode}\n            onLayoutChange={(currentLayout: RGL.Layout[], layouts: RGL.Layouts) => {\n                let updates: Array<any> = []\n                const oldLayouts = desktop.layouts\n                let clonedLayouts = structuredClone(layouts)\n                for (let sizeKey in oldLayouts) {\n                    let dict: { [id: string]: RGL.Layout } = {}\n                    for (let i = 0; i < oldLayouts[sizeKey].length; i++) {\n                        let item = oldLayouts[sizeKey][i]\n                        dict[item.i] = item\n                    }\n                    clonedLayouts[sizeKey].forEach((item: RGL.Layout) => {\n                        let oldItem = dict[item.i]\n                        if (oldItem) {\n                            if (JSON.stringify(item) !== JSON.stringify(oldItem)) {\n                                updates.push({ sizeKey, item, __action__: 'updated' })\n                            }\n                        } else {\n                            updates.push({ sizeKey, item, __action__: 'created' })\n                        }\n                    })\n                }\n                desktop.updateLayoutsInternally(clonedLayouts, updates)\n            }}\n        >\n            {\n                desktop.layouts['lg'].map(item => item.i).map((key, index) => {\n                    return (\n                        <div key={key} style={{ overflow: 'hidden', borderRadius: 4 }}>\n                            <AppletHost.Host appletKey={key} code={desktop.jsxContent[key]} index={index} />\n                        </div>\n                    )\n                })\n            }\n        </ResponsiveReactGridLayout>\n    );\n}\n\nexport default {\n    Host,\n    DesktopData\n}\n","import MwcDriver from \"applet-mwc\"\nimport { useEffect, useRef } from \"react\"\nimport { Applet, Controls } from \"applet-vm\"\n\nlet hostLoaded: { [id: string]: boolean } = {}\n\nconst unloadAllHosts = () => {\n    hostLoaded = {}\n}\n\nconst Host = (props: { appletKey: string, code: string, index: number }) => {\n    const hostContainerrId = `AppletHost:${props.appletKey}`\n    const appletRef = useRef(new Applet(props.appletKey))\n    const rootRef = useRef(null)\n    useEffect(() => {\n        //if (!hostLoaded[props.appletKey]) {\n            hostLoaded[props.appletKey] = true\n            appletRef.current.fill(props.code)\n            let root = document.getElementById(hostContainerrId)\n            if (root !== null) {\n                let driver = new MwcDriver(appletRef.current, root)\n                driver.start('Test', Controls)\n            }\n        //}\n        setTimeout(() => {\n            if (rootRef.current !== null) {\n                let root = rootRef.current as HTMLElement\n                root.style.transform = 'scale(1, 1)'\n                root.style.opacity = '1'\n            }\n        }, (props.index + 1) * 75);\n    }, [])\n    return (\n        <div\n            ref={rootRef}\n            id={hostContainerrId}\n            style={{\n                width: '100%',\n                height: '100%',\n                overflow: 'hidden',\n                transform: 'scale(0.65, 0.65)',\n                opacity: 0,\n                transition: 'transform .35s'\n            }}\n        />\n    )\n}\n\nexport default { Host, unloadAllHosts }\n"]}