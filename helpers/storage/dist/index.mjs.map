{"version":3,"sources":["../database/transactions/upload.ts","../database/schemas/document.schema.ts","../database/schemas/preview.schema.ts","../folders.ts","../config.ts","../database/drivers/main-driver.ts","../utils/generator.ts","../utils/previewer.ts","../database/schemas/group.schema.ts","../database/transactions/download.ts","../database/transactions/group.ts","../database/schemas/index.ts","../database/initiators/main-initiator.ts","../database/index.ts","../app.ts","../index.ts"],"sourcesContent":["\nimport { Document } from '../schemas/document.schema';\nimport { Preview } from 'database/schemas/preview.schema';\nimport config from '../../config';\nimport fs from \"fs\";\nimport mongoose from 'mongoose';\nimport { s3Client } from '../drivers/main-driver';\nimport * as Utils from '../../utils'\nimport { PutObjectCommand } from '@aws-sdk/client-s3';\nimport { Group } from 'database/schemas/group.schema';\nimport { execShellCommand } from 'utils/exec';\n\nfunction getFilesizeInBytes(filename) {\n  var stats = fs.statSync(filename);\n  var fileSizeInBytes = stats.size;\n  return fileSizeInBytes;\n}\n\nconst finalup = async (path: string, roomId: string, humanId: string, isPublic: boolean, extension: string, type: string, title: string) => {\n  const session = await mongoose.startSession();\n  session.startTransaction();\n  let preview = (await Preview.create([{\n    id: Utils.generator.makeUniqueId()\n  }], { session }))[0];\n  let fileSize = getFilesizeInBytes(path);\n  let document = (await Document.create([{\n    id: Utils.generator.makeUniqueId(),\n    isPublic: isPublic,\n    type: type,\n    previewId: preview.id,\n    time: Date.now(),\n    secret: {\n      uploaderId: humanId,\n      roomIds: [roomId],\n    },\n    metadata: {\n      size: fileSize,\n      duration: 0,\n      width: 0,\n      height: 0,\n      extension: extension,\n      title: title\n    }\n  }], { session }))[0];\n  let group = await Group.findOne({ roomId: roomId }).session(session).lean().exec()\n  if (group === null) {\n    group = (await Group.create([{\n      roomId: roomId,\n      docIds: [document.id]\n    }], { session }))[0]\n  } else {\n    await Group.updateOne({ roomId: roomId }, { $push: { docIds: document.id } },).session(session)\n  }\n  await session.commitTransaction();\n  session.endSession();\n  try {\n    let res = await Utils.previewer.generatePreview(path, document.id, preview.id, type, extension)\n    let { duration, width, height, previewPath, waveformPath } = res\n    const docParams = {\n      Bucket: config.LIARA_BUCKET_NAME,\n      Key: document.id,\n      Body: fs.createReadStream(path)\n    };\n    await s3Client.send(new PutObjectCommand(docParams));\n    let hasPhoto = false, hasWaveform = false\n    if (previewPath?.length > 0) {\n      hasPhoto = true\n      const prevParams = {\n        Bucket: config.LIARA_BUCKET_NAME,\n        Key: preview.id,\n        Body: fs.createReadStream(previewPath)\n      };\n      await s3Client.send(new PutObjectCommand(prevParams));\n      await fs.promises.rm(previewPath)\n    }\n    if (waveformPath?.length > 0) {\n      hasWaveform = true\n      const prevParams = {\n        Bucket: config.LIARA_BUCKET_NAME,\n        Key: preview.id + '-waveform',\n        Body: fs.createReadStream(waveformPath)\n      };\n      await s3Client.send(new PutObjectCommand(prevParams));\n      await fs.promises.rm(waveformPath)\n    }\n    const session = await mongoose.startSession();\n    session.startTransaction();\n    preview = await Preview.findOneAndUpdate({ id: preview.id }, { photo: hasPhoto, waveform: hasWaveform }, { new: true }).session(session);\n    if (duration || (width && height)) {\n      if (duration) {\n        document = await Document.findOneAndUpdate({ id: document.id }, { duration: duration }, { new: true }).session(session);\n      } else if (width && height) {\n        document = await Document.findOneAndUpdate({ id: document.id }, { width: width, height: height }, { new: true }).session(session);\n      }\n    }\n    await session.commitTransaction();\n    session.endSession();\n    return { success: true, document, preview };\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport { finalup }\n","import mongoose, { Schema } from 'mongoose';\nimport IDocument from 'models/document.model';\n\nconst DocumentSchema = new Schema({\n    id: String,\n    type: String,\n    time: Number,\n    isPublic: Boolean,\n    previewId: String,\n    secret: Schema.Types.Mixed,\n    metadata: Schema.Types.Mixed\n})\n\nlet Document: mongoose.Model<IDocument>\n\nconst prepare = () => {\n    Document = mongoose.model<IDocument>('Document', DocumentSchema, 'Document');\n}\n\nexport {\n    prepare,\n    DocumentSchema,\n    Document\n}\n","import mongoose, { Schema } from 'mongoose';\nimport IPreview from 'models/preview.model';\n\nconst PreviewSchema = new Schema({\n    id: String,\n    photo: Boolean,\n    waveform: Boolean\n})\n\nlet Preview: mongoose.Model<IPreview>\n\nconst prepare = () => {\n     Preview = mongoose.model<IPreview>('Preview', PreviewSchema, 'Preview');\n}\n\nexport {\n    prepare,\n    PreviewSchema,\n    Preview    \n}\n","\nlet folders = {\n    FILES: \"\",\n    PREVIEWS: \"\",\n    TEMP: \"\",\n    PDF_PAGES: \"\",\n    PARTITIONS: \"\"\n}\n\nexport let setupFoldersPath = (rootPath: string) => {\n    folders.FILES = `${rootPath}/data/files`\n    folders.PREVIEWS = `${rootPath}/data/previews`\n    folders.TEMP = `${rootPath}/data/temp`\n    folders.PDF_PAGES = `${rootPath}/data/pdf-pages`\n    folders.PARTITIONS = `${rootPath}/data/partitions`\n}\n\nexport default folders\n","import { setupFoldersPath } from \"folders\"\n\nlet config = {\n    LIARA_ENDPOINT: \"\",\n    LIARA_BUCKET_NAME: \"\",\n    LIARA_ACCESS_KEY: \"\",\n    LIARA_SECRET_KEY: \"\",\n    MONGODB_URI: \"\",\n    TEMP_STORAGE: \"\"\n}\n\nexport let setupConfig = (c: any) => {\n    for (let key in config) {\n        config[key] = c[key]\n    }\n    setupFoldersPath(config.TEMP_STORAGE)\n}\n\nexport default config\n","import mongoose from 'mongoose';\nimport config from '../../config';\nimport { S3Client } from \"@aws-sdk/client-s3\";\n\nconst connectMongoClient = async () => {\n  return new Promise(resolve => {\n    mongoose.connect(config.MONGODB_URI,\n      (err) => {\n        if (err) {\n          console.error('FAILED TO CONNECT TO MONGODB');\n          console.error(err);\n        } else {\n          console.log('CONNECTED TO MONGODB');\n          resolve({})\n        }\n      });\n  })\n};\n\nlet s3Client: S3Client;\n\nconst connectToS3 = async () => {\n  s3Client = new S3Client({\n    region: \"default\",\n    endpoint: config.LIARA_ENDPOINT,\n    credentials: {\n      accessKeyId: config.LIARA_ACCESS_KEY,\n      secretAccessKey: config.LIARA_SECRET_KEY\n    },\n  });\n};\n\nexport {\n  connectMongoClient,\n  connectToS3,\n  s3Client\n}\n","import * as crypto from \"crypto\";\n\nconst makeUniqueId = () => {\n    return crypto.randomBytes(16).toString(\"hex\");\n}\n\nexport {\n    makeUniqueId\n}\n","\nimport folders from '../folders';\nimport { exec } from \"child_process\";\nimport fs from \"fs\";\nimport { fromPath } from \"pdf2pic\";\nimport genThumbnail from \"simple-thumbnail\";\nimport sharp from \"sharp\";\nimport { getAudioDurationInSeconds } from 'get-audio-duration';\nimport sizeOf from 'image-size';\n\nconst generatePreview = (documentPath: string, documentId: string, previewId: string, type: string, extension: string): Promise<{ width?: number, height?: number, duration?: number, previewPath: string, waveformPath?: string, videoParts?: string }> => {\n    return new Promise(resolve => {\n        if (type === \"application\" && extension === 'pdf') {\n            let tempFilePath = folders.TEMP + \"/\" + documentId + \".pdf\";\n            fs.copyFileSync(documentPath, tempFilePath);\n            const options = {\n                density: 100,\n                saveFilename: documentId,\n                savePath: folders.PDF_PAGES,\n                format: \"jpg\",\n                width: 300,\n                height: 400,\n            };\n            fromPath(tempFilePath, options).bulk(1, true).then((output: any) => {\n                fs.rmSync(tempFilePath);\n                if (output.length > 0) {\n                    fs.writeFileSync(\n                        folders.PREVIEWS + \"/\" + previewId + \".jpg\",\n                        output[0].base64,\n                        \"base64\"\n                    );\n                }\n                resolve({ previewPath: folders.PREVIEWS + \"/\" + previewId + \".jpg\" });\n            });\n        } else if (type === 'video') {\n            genThumbnail(\n                documentPath,\n                folders.PREVIEWS + \"/\" + previewId + \".jpg\",\n                \"256x196\"\n            )\n                .then(() => {\n                    resolve({\n                        previewPath: folders.PREVIEWS + \"/\" + previewId + \".jpg\"\n                    });\n                })\n                .catch((err) => console.error(err));\n        } else if (type === 'image') {\n            const finalPreviewPath = folders.PREVIEWS + \"/\" + previewId + '.jpg';\n            sharp(documentPath)\n                .resize(200, 200)\n                .toFile(finalPreviewPath, function (err) {\n                    sizeOf(finalPreviewPath, function (err, dimensions) {\n                        resolve({\n                            width: dimensions.width,\n                            height: dimensions.height,\n                            previewPath: finalPreviewPath\n                        });\n                    });\n                });\n        } else if (type === \"audio\") {\n            const tempFilePath = folders.TEMP + \"/\" + documentId + \".\" + extension;\n            const tempMp3FilePath = folders.TEMP + \"/\" + documentId + \".mp3\";\n            fs.copyFileSync(documentPath, tempFilePath);\n            let calculatingGraph = () => {\n                exec(\n                    `ffmpeg -i ${extension === 'mp3' ? tempMp3FilePath : tempFilePath} -f wav - | audiowaveform --input-format wav --output-format json --pixels-per-second 2 -b 8 > ${folders.PREVIEWS + \"/\" + previewId + \".json\"}`,\n                    async (error, stdout, stderr) => {\n                        console.log(stdout)\n                        if (error) {\n                            console.log(`error: ${error}`);\n                        }\n                        if (stderr) {\n                            console.log(`stderr: ${stderr}`);\n                        }\n                        console.log('generated waveform.');\n                        console.log('measuring duration...');\n                        let duration = undefined;\n                        try {\n                            duration = await getAudioDurationInSeconds(extension === 'mp3' ? tempMp3FilePath : tempFilePath);\n                        } catch (ex) { console.log(ex) }\n                        console.log('generating cover...');\n                        let cover;\n                        try {\n                            let { parseFile, selectCover } = await import(\"music-metadata\")\n                            const { common } = await parseFile(extension === 'mp3' ? tempMp3FilePath : tempFilePath);\n                            cover = selectCover(common.picture);\n                        } catch (ex) { console.log(ex) }\n                        if (cover) {\n                            fs.writeFile(folders.PREVIEWS + \"/\" + previewId + \".jpg\", cover.data, { flag: 'w' }, () => {\n                                sharp(folders.PREVIEWS + \"/\" + previewId + \".jpg\")\n                                    .resize(200, 200)\n                                    .toFile(folders.PREVIEWS + \"/\" + previewId, function (err) {\n                                        console.log('generated cover.');\n                                        fs.rmSync(folders.PREVIEWS + \"/\" + previewId + \".jpg\");\n                                        fs.renameSync(\n                                            folders.PREVIEWS + \"/\" + previewId,\n                                            folders.PREVIEWS + \"/\" + previewId + \".jpg\"\n                                        );\n                                        if (fs.existsSync(tempFilePath)) fs.rmSync(tempFilePath);\n                                        if (fs.existsSync(tempMp3FilePath)) fs.rmSync(tempMp3FilePath);\n                                        resolve({\n                                            duration,\n                                            previewPath: folders.PREVIEWS + \"/\" + previewId + \".jpg\",\n                                            waveformPath: fs.existsSync(folders.PREVIEWS + \"/\" + previewId + \".json\") ?\n                                                (folders.PREVIEWS + \"/\" + previewId + \".json\") :\n                                                undefined\n                                        });\n                                    });\n                            });\n                        } else {\n                            console.log('cover generation failed.');\n                            if (fs.existsSync(tempFilePath)) fs.rmSync(tempFilePath);\n                            if (fs.existsSync(tempMp3FilePath)) fs.rmSync(tempMp3FilePath);\n                            resolve({\n                                duration,\n                                previewPath: \"\",\n                                waveformPath: fs.existsSync(folders.PREVIEWS + \"/\" + previewId + \".json\") ?\n                                    (folders.PREVIEWS + \"/\" + previewId + \".json\") :\n                                    undefined\n                            });\n                        }\n                    });\n            };\n            if (extension === \"aac\" || extension === 'ogg') {\n                exec(\n                    `ffmpeg -i ${tempFilePath} -vn -ar 44100 -ac 2 -b:a 192k ${tempMp3FilePath}`,\n                    (error, stdout, stderr) => {\n                        extension = \"mp3\";\n                        console.log('generated mp3.');\n                        calculatingGraph();\n                    }\n                );\n            } else {\n                calculatingGraph();\n            }\n        } else {\n            resolve({ previewPath: \"\" });\n        }\n    })\n}\n\nexport {\n    generatePreview\n}\n","import mongoose, { Schema } from 'mongoose';\nimport IGroup from '../../models/group.model';\n\nconst GroupSchema = new Schema({\n    roomId: String,\n    docIds: [String]\n})\n\nlet Group: mongoose.Model<IGroup>\n\nconst prepare = () => {\n    Group = mongoose.model<IGroup>('Group', GroupSchema, 'Group');\n}\n\nexport {\n    prepare,\n    GroupSchema,\n    Group\n}\n","\nimport { Document } from '../schemas/document.schema';\nimport { s3Client } from '../drivers/main-driver';\nimport config from '../../config';\nimport { GetObjectCommand } from '@aws-sdk/client-s3';\nimport IDocument from 'models/document.model';\n\nconst document = async (documentId: string, roomId: string, range: any, res: any, onEnd?: () => void) => {\n  try {\n    let success = false;\n    let doc = await Document.findOne({ id: documentId }).exec() as IDocument;\n    if (doc !== null) {\n      if (doc.isPublic || (doc.secret.roomIds.includes(roomId))) {\n        const params = {\n          Bucket: config.LIARA_BUCKET_NAME,\n          Key: documentId,\n          Range: range\n        }\n        try {\n          const data = await s3Client.send(new GetObjectCommand(params));\n          data.Body.transformToWebStream().pipeTo(res).then(() => (onEnd && onEnd()))\n        } catch (error) {\n          console.log(error);\n        }\n        success = true;\n      } else {\n        console.error('access denied');\n      }\n    } else {\n      console.error('document not found');\n    }\n    return { success: success };\n  } catch (error) {\n    console.error(error);\n    return { success: false };\n  }\n}\n\nconst preview = async (documentId: string, roomId: string, res: any) => {\n  try {\n    let success = false;\n    let doc = await Document.findOne({ id: documentId }).exec() as IDocument;\n    if (doc !== null) {\n      if (doc.isPublic || (doc.secret.roomIds.includes(roomId))) {\n        const params = {\n          Bucket: config.LIARA_BUCKET_NAME,\n          Key: doc.previewId\n        }\n        try {\n          const data = await s3Client.send(new GetObjectCommand(params));\n          data.Body.transformToWebStream().pipeTo(res)\n        } catch (error) {\n          console.log(error);\n        }\n        success = true\n      }\n    } else {\n      console.error('document not found');\n    }\n    return { success: success };\n  } catch (error) {\n    console.error(error);\n    return { success: false };\n  }\n}\n\nconst waveform = async (documentId: string, roomId: string, res: any) => {\n  try {\n    let success = false;\n    let doc = await Document.findOne({ id: documentId }).exec() as IDocument;\n    if (doc !== null) {\n      if (doc.isPublic || (doc.secret.roomIds.includes(roomId))) {\n        if (doc.type === 'audio') {\n          const params = {\n            Bucket: config.LIARA_BUCKET_NAME,\n            Key: doc.previewId + '-waveform'\n          }\n          try {\n            const data = await s3Client.send(new GetObjectCommand(params));\n            data.Body.transformToWebStream().pipeTo(res)\n          } catch (error) {\n            console.log(error);\n          }\n        }\n        success = true;\n      } else {\n        console.error('access denied');\n      }\n    } else {\n      console.error('document not found');\n    }\n    return { success: success };\n  } catch (error) {\n    console.error(error);\n    return { success: false };\n  }\n}\n\nexport {\n  document,\n  preview,\n  waveform\n}\n","\nimport { Document } from 'database/schemas/document.schema';\nimport { Group } from 'database/schemas/group.schema';\nimport { Preview } from 'database/schemas/preview.schema';\n\nconst docIds = async (roomId: string) => {\n  let group = await Group.findOne({ roomId: roomId }).lean().exec();\n  if (group !== null) {\n    return { success: true, docIds: group.docIds };\n  } else {\n    return { success: false };\n  }\n}\n\nconst docsByIds = async (docIds: Array<string>) => {\n  let docs = await Document.find({ id: { $in: docIds } }).lean().exec();\n  let previewsDict = {};\n  (await Preview.find({ id: { $in: docs.map(d => d.previewId) } })).forEach(p => (previewsDict[p.id] = []))\n  let result = []\n  docs.forEach(d => {\n    result.push({ ...d, preview: previewsDict[d.previewId] })\n  })\n  return { success: true, docs: result };\n}\n\nconst docById = async (docId: string) => {\n  let doc = await Document.findOne({ id: docId }).lean().exec();\n  if (doc !== null) {\n    return { success: true, doc: { ...doc, preview: await Preview.findOne({ id: doc.previewId }) } };\n  } else {\n    return { success: false }\n  }\n}\n\nconst removeDoc = async (docId: string) => {\n  let doc = await Document.findOneAndDelete({ id: docId });\n  return { success: doc !== null };\n}\n\nconst updateDoc = async (docId: string, data: { title: string }) => {\n  let doc = await Document.findOneAndUpdate({ id: docId }, { $set: { 'metadata.title': data.title } }, { new: true }).lean();\n  return doc ? { success: true, doc } : { success: false };\n}\n\nexport {\n  docIds,\n  docsByIds,\n  docById,\n  removeDoc,\n  updateDoc\n}\n","\nimport * as DocumentSchema from \"./document.schema\"\nimport * as GroupSchema from \"./group.schema\"\nimport * as PreviewSchema from './preview.schema'\n\nconst build = () => {\n    DocumentSchema.prepare()\n    PreviewSchema.prepare()\n    GroupSchema.prepare()\n}\n\nexport {\n    build,\n    DocumentSchema,\n    PreviewSchema\n}\n","import * as Schemas from \"database/schemas/\";\nimport { connectMongoClient, connectToS3 } from '../drivers/main-driver';\nimport fs from 'fs';\nimport config from \"config\";\n\nconst setupDatabase = async () => {\n    await connectMongoClient()\n    await connectToS3()\n    Schemas.build()\n    if (!fs.existsSync(`${config.TEMP_STORAGE}/data`)) await fs.promises.mkdir(`${config.TEMP_STORAGE}/data`, {recursive: true});\n    if (!fs.existsSync(`${config.TEMP_STORAGE}/data/files`)) await fs.promises.mkdir(`${config.TEMP_STORAGE}/data/files`, {recursive: true});\n    if (!fs.existsSync(`${config.TEMP_STORAGE}/data/previews`)) await fs.promises.mkdir(`${config.TEMP_STORAGE}/data/previews`, {recursive: true});\n    if (!fs.existsSync(`${config.TEMP_STORAGE}/data/temp`)) await fs.promises.mkdir(`${config.TEMP_STORAGE}/data/temp`, {recursive: true});\n    if (!fs.existsSync(`${config.TEMP_STORAGE}/data/pdf-pages`)) await fs.promises.mkdir(`${config.TEMP_STORAGE}/data/pdf-pages`, {recursive: true});\n    if (!fs.existsSync(`${config.TEMP_STORAGE}/data/partitions`)) await fs.promises.mkdir(`${config.TEMP_STORAGE}/data/partitions`, {recursive: true});\n}\n\nexport {\n    setupDatabase\n}\n","import { setupDatabase } from \"./initiators/main-initiator\";\n\nclass StorageDriver {\n    static inst;\n    static async initialize() {\n        return new Promise((resolve: any) => {\n            return new StorageDriver(resolve);\n        })\n    }\n    static instance() {\n        return StorageDriver.inst;\n    }\n    constructor(callback: () => void) {\n        StorageDriver.inst = this;\n        setupDatabase().then(() => {\n            callback();\n        })\n    }\n}\n\nexport default StorageDriver;\n","\nimport * as upload from './database/transactions/upload'\nimport * as download from './database/transactions/download'\nimport * as group from './database/transactions/group'\nimport { setupConfig } from 'config'\nimport StorageDriver from 'database'\n\nclass SigmaStorage {\n    constructor(config: any) {\n        setupConfig(config)\n    }\n    public async start() {\n        await StorageDriver.initialize()\n    }\n    public uploader = upload\n    public downloader = download\n    public group = group\n\n}\n\nexport default SigmaStorage\n","\nimport SigmaStorage from \"app\";\n\nexport default SigmaStorage\n"],"mappings":"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","names":["mongoose","Schema","prepare","fs","mongoose","mongoose","mongoose","err","mongoose","Schema","prepare","fs","mongoose","preview","document","session","docIds","prepare","fs","fs","config"]}